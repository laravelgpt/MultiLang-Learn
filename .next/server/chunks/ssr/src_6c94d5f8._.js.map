{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/decompose-problem.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI-powered tool to decompose complex problems into manageable steps.\n *\n * - decomposeProblem - A function that takes a problem statement and returns a structured breakdown.\n * - DecomposeProblemInput - The input type for the decomposeProblem function.\n * - DecomposeProblemOutput - The return type for the decomposeProblem function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst DecomposeProblemInputSchema = z.object({\n  problemStatement: z.string().describe('The problem statement to be decomposed.'),\n});\nexport type DecomposeProblemInput = z.infer<typeof DecomposeProblemInputSchema>;\n\nconst DecomposeProblemOutputSchema = z.object({\n  inputs: z.string().describe('What are the expected inputs for the problem?'),\n  outputs: z.string().describe('What is the expected output after solving the problem?'),\n  constraints: z.string().describe('What are the constraints or edge cases to consider?'),\n  stepByStepPlan: z.array(z.string()).describe('A step-by-step plan to solve the problem, as a list of strings.'),\n  dataStructures: z.string().describe('What data structures would be suitable for solving this problem and why?'),\n});\nexport type DecomposeProblemOutput = z.infer<typeof DecomposeProblemOutputSchema>;\n\nexport async function decomposeProblem(input: DecomposeProblemInput): Promise<DecomposeProblemOutput> {\n  return decomposeProblemFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'decomposeProblemPrompt',\n  input: {schema: DecomposeProblemInputSchema},\n  output: {schema: DecomposeProblemOutputSchema},\n  prompt: `You are an expert software engineer who excels at breaking down complex problems for beginners.\nA user has provided the following problem statement. Your task is to decompose it into a structured plan.\n\nProblem Statement:\n\"{{{problemStatement}}}\"\n\nPlease provide a clear and concise breakdown of this problem by filling out the following fields:\n- **inputs**: Describe the expected inputs.\n- **outputs**: Describe the desired output.\n- **constraints**: List any constraints, assumptions, or edge cases.\n- **stepByStepPlan**: Provide a step-by-step, high-level plan to solve the problem. Each step should be a clear action.\n- **dataStructures**: Suggest appropriate data structures and briefly explain why they are suitable.\n`,\n});\n\nconst decomposeProblemFlow = ai.defineFlow(\n  {\n    name: 'decomposeProblemFlow',\n    inputSchema: DecomposeProblemInputSchema,\n    outputSchema: DecomposeProblemOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IA0BsB,mBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-xl font-semibold leading-none tracking-tight md:text-2xl\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/problem-solving/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useLanguage } from '@/context/language-provider';\nimport { decomposeProblem, type DecomposeProblemOutput } from '@/ai/flows/decompose-problem';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Form, FormControl, FormField, FormItem, FormMessage } from '@/components/ui/form';\nimport { Zap, BrainCircuit, Lightbulb, ListChecks, Goal, CheckCircle, Boxes, Loader2 } from 'lucide-react';\nimport { Separator } from '@/components/ui/separator';\n\nconst formSchema = z.object({\n  problemStatement: z.string().min(10, { message: \"Problem statement must be at least 10 characters.\" }),\n});\n\nexport default function ProblemSolvingPage() {\n  const { t } = useLanguage();\n  const [isLoading, setIsLoading] = useState(false);\n  const [analysis, setAnalysis] = useState<DecomposeProblemOutput | null>(null);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      problemStatement: \"\",\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsLoading(true);\n    setAnalysis(null);\n    try {\n      const result = await decomposeProblem({ problemStatement: values.problemStatement });\n      setAnalysis(result);\n    } catch (error) {\n      console.error(error);\n      // You can add a toast notification here for the user\n    } finally {\n      setIsLoading(false);\n    }\n  }\n  \n  const AnalysisSection = ({ icon, title, content }: { icon: React.ReactNode, title: string, content: string | string[] }) => (\n    <div>\n        <div className=\"flex items-center gap-3 mb-2\">\n            {icon}\n            <h3 className=\"text-lg font-semibold\">{title}</h3>\n        </div>\n        {Array.isArray(content) ? (\n            <ul className=\"space-y-2 pl-6\">\n                {content.map((item, index) => (\n                    <li key={index} className=\"flex items-start gap-2\">\n                        <CheckCircle className=\"h-4 w-4 mt-1 text-green-500 shrink-0\" />\n                        <p className=\"text-muted-foreground\">{item}</p>\n                    </li>\n                ))}\n            </ul>\n        ) : (\n            <p className=\"text-muted-foreground pl-9\">{content}</p>\n        )}\n    </div>\n  );\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center gap-4\">\n        <Zap className=\"h-10 w-10 text-primary shrink-0\" />\n        <div>\n          <h1 className=\"font-headline text-3xl font-bold text-primary\">{t('problem_solving_title')}</h1>\n          <p className=\"text-lg text-muted-foreground\">{t('problem_solving_desc')}</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-start\">\n        <Card>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)}>\n              <CardHeader>\n                <CardTitle>{t('problem_statement')}</CardTitle>\n                <CardDescription>{t('describe_the_problem')}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <FormField\n                  control={form.control}\n                  name=\"problemStatement\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <Textarea\n                          rows={8}\n                          placeholder={t('enter_problem_statement')}\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n              <CardContent>\n                <Button type=\"submit\" disabled={isLoading} className=\"w-full\">\n                  {isLoading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <BrainCircuit className=\"mr-2 h-4 w-4\" />}\n                  {isLoading ? t('decomposing') : t('decompose_problem')}\n                </Button>\n              </CardContent>\n            </form>\n          </Form>\n        </Card>\n\n        <Card className=\"min-h-[400px]\">\n          <CardHeader>\n            <CardTitle>{t('ai_breakdown')}</CardTitle>\n            <CardDescription>{t('ai_generated_plan')}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading && (\n              <div className=\"flex flex-col items-center justify-center h-64 text-muted-foreground\">\n                <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n                <p className=\"mt-4\">{t('decomposing')}</p>\n              </div>\n            )}\n            {analysis && !isLoading && (\n                <div className=\"space-y-6\">\n                    <AnalysisSection icon={<Goal className=\"h-6 w-6 text-primary\"/>} title={t('inputs')} content={analysis.inputs} />\n                    <Separator />\n                    <AnalysisSection icon={<ListChecks className=\"h-6 w-6 text-green-500\"/>} title={t('outputs')} content={analysis.outputs} />\n                    <Separator />\n                    <AnalysisSection icon={<Lightbulb className=\"h-6 w-6 text-yellow-500\"/>} title={t('constraints')} content={analysis.constraints} />\n                    <Separator />\n                    <AnalysisSection icon={<Boxes className=\"h-6 w-6 text-purple-500\"/>} title={t('suggested_data_structures')} content={analysis.dataStructures} />\n                    <Separator />\n                    <AnalysisSection icon={<ListChecks className=\"h-6 w-6 text-blue-500\"/>} title={t('step_by_step_plan')} content={analysis.stepByStepPlan} />\n                </div>\n            )}\n            {!analysis && !isLoading && (\n              <div className=\"flex flex-col items-center justify-center h-64 text-center text-muted-foreground\">\n                <BrainCircuit className=\"h-16 w-16 mb-4\" />\n                <p>{t('get_started_by_entering_problem')}</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}