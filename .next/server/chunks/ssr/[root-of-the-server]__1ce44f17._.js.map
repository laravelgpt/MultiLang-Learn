{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/decompose-problem.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI-powered tool to decompose complex problems into manageable steps.\n *\n * - decomposeProblem - A function that takes a problem statement and returns a structured breakdown.\n * - DecomposeProblemInput - The input type for the decomposeProblem function.\n * - DecomposeProblemOutput - The return type for the decomposeProblem function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst DecomposeProblemInputSchema = z.object({\n  problemStatement: z.string().describe('The problem statement to be decomposed.'),\n});\nexport type DecomposeProblemInput = z.infer<typeof DecomposeProblemInputSchema>;\n\nconst DecomposeProblemOutputSchema = z.object({\n  inputs: z.string().describe('What are the expected inputs for the problem?'),\n  outputs: z.string().describe('What is the expected output after solving the problem?'),\n  constraints: z.string().describe('What are the constraints or edge cases to consider?'),\n  stepByStepPlan: z.array(z.string()).describe('A step-by-step plan to solve the problem, as a list of strings.'),\n  dataStructures: z.string().describe('What data structures would be suitable for solving this problem and why?'),\n});\nexport type DecomposeProblemOutput = z.infer<typeof DecomposeProblemOutputSchema>;\n\nexport async function decomposeProblem(input: DecomposeProblemInput): Promise<DecomposeProblemOutput> {\n  return decomposeProblemFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'decomposeProblemPrompt',\n  input: {schema: DecomposeProblemInputSchema},\n  output: {schema: DecomposeProblemOutputSchema},\n  prompt: `You are an expert software engineer who excels at breaking down complex problems for beginners.\nA user has provided the following problem statement. Your task is to decompose it into a structured plan.\n\nProblem Statement:\n\"{{{problemStatement}}}\"\n\nPlease provide a clear and concise breakdown of this problem by filling out the following fields:\n- **inputs**: Describe the expected inputs.\n- **outputs**: Describe the desired output.\n- **constraints**: List any constraints, assumptions, or edge cases.\n- **stepByStepPlan**: Provide a step-by-step, high-level plan to solve the problem. Each step should be a clear action.\n- **dataStructures**: Suggest appropriate data structures and briefly explain why they are suitable.\n`,\n});\n\nconst decomposeProblemFlow = ai.defineFlow(\n  {\n    name: 'decomposeProblemFlow',\n    inputSchema: DecomposeProblemInputSchema,\n    outputSchema: DecomposeProblemOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACxC;AAGA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IAC7C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGO,eAAe,iBAAiB,KAA4B;IACjE,OAAO,qBAAqB;AAC9B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA2B;IAC3C,QAAQ;QAAC,QAAQ;IAA4B;IAC7C,QAAQ,CAAC;;;;;;;;;;;;AAYX,CAAC;AACD;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACxC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAhCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/problem-solving/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {decomposeProblem as '40b284aeeefbe69d5962673b9848aaf797c3807561'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 359, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/problem-solving/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/problem-solving/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/problem-solving/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoS,GACjU,kEACA","debugId":null}},
    {"offset": {"line": 373, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/problem-solving/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/problem-solving/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/problem-solving/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgR,GAC7S,8CACA","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}