{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/explain-code.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A Genkit flow for explaining code snippets.\n *\n * - explainCode - A function that takes a code snippet and returns an explanation.\n * - ExplainCodeInput - The input type for the explainCode function.\n * - ExplainCodeOutput - The return type for the explainCode function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ExplainCodeInputSchema = z.object({\n  code: z.string().describe('The code snippet to be explained.'),\n});\nexport type ExplainCodeInput = z.infer<typeof ExplainCodeInputSchema>;\n\nconst ExplainCodeOutputSchema = z.object({\n  explanation: z.string().describe('A detailed explanation of the code, formatted in Markdown.'),\n});\nexport type ExplainCodeOutput = z.infer<typeof ExplainCodeOutputSchema>;\n\nexport async function explainCode(input: ExplainCodeInput): Promise<ExplainCodeOutput> {\n  return explainCodeFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'explainCodePrompt',\n  input: {schema: ExplainCodeInputSchema},\n  output: {schema: ExplainCodeOutputSchema},\n  prompt: `You are an expert programming tutor who is friendly and encouraging.\nYour task is to explain the provided code snippet to a beginner.\n\nFollow these steps:\n1.  **High-Level Summary:** Start with a one-sentence summary of what the code does.\n2.  **Line-by-Line or Block-by-Block Explanation:** Break down the code into logical parts and explain each one. Use simple language.\n3.  **Key Concepts:** Briefly explain any important programming concepts demonstrated in the code (e.g., variables, functions, loops, scope).\n4.  **Potential Improvements (Optional):** If applicable, gently suggest one or two ways the code could be improved or written differently, explaining the benefits.\n5.  **Output:** Explain what the expected output of the code will be when it's run.\n\nFormat your entire response in simple Markdown. Use bullet points for lists and backticks for code elements.\n\nCode to explain:\n\\`\\`\\`javascript\n{{{code}}}\n\\`\\`\\`\n`,\n});\n\nconst explainCodeFlow = ai.defineFlow(\n  {\n    name: 'explainCodeFlow',\n    inputSchema: ExplainCodeInputSchema,\n    outputSchema: ExplainCodeOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAGA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,YAAY,KAAuB;IACvD,OAAO,gBAAgB;AACzB;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAsB;IACtC,QAAQ;QAAC,QAAQ;IAAuB;IACxC,QAAQ,CAAC;;;;;;;;;;;;;;;;AAgBX,CAAC;AACD;AAEA,MAAM,kBAAkB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IApCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-code-example.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI-powered tool to generate code examples with common errors.\n *\n * - generateCodeExample - A function that takes a language, topic, and difficulty and returns a code example.\n * - GenerateCodeExampleInput - The input type for the generateCodeExample function.\n * - GenerateCodeExampleOutput - The return type for the generateCodeExample function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateCodeExampleInputSchema = z.object({\n  language: z.string().describe('The programming language for the code example (e.g., JavaScript, Python).'),\n  difficulty: z.string().describe(\"The difficulty level of the error in the code ('Easy', 'Medium', 'Hard', 'Heavy Hard').\"),\n  topic: z.string().describe(\"The specific programming topic or concept for the code example.\"),\n});\nexport type GenerateCodeExampleInput = z.infer<typeof GenerateCodeExampleInputSchema>;\n\nconst GenerateCodeExampleOutputSchema = z.object({\n  title: z.string().describe(\"A concise title for the code example.\"),\n  description: z.string().describe(\"A brief, one-sentence description of the concept or error demonstrated.\"),\n  code: z.string().describe(\"The code snippet containing a deliberate error appropriate for the specified language and difficulty.\"),\n});\nexport type GenerateCodeExampleOutput = z.infer<typeof GenerateCodeExampleOutputSchema>;\n\nexport async function generateCodeExample(input: GenerateCodeExampleInput): Promise<GenerateCodeExampleOutput> {\n  return generateCodeExampleFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateCodeExamplePrompt',\n  input: {schema: GenerateCodeExampleInputSchema},\n  output: {schema: GenerateCodeExampleOutputSchema},\n  prompt: `You are an expert programming instructor who creates educational code examples with deliberate errors.\nYour task is to generate a code snippet in '{{language}}' about the topic of '{{topic}}'.\nThe code **absolutely must contain one single, common, non-obvious error** corresponding to a '{{difficulty}}' difficulty level.\n\nIt is critical that the code has an error. The code should look correct at a glance but produce an incorrect result or a runtime error when executed.\nDo not add any comments explaining the error in the code itself. The purpose is for the user to find and fix it.\nThe error should be something a learner at the specified difficulty level could reasonably be expected to identify and fix.\n\nDifficulty Guide:\n- Easy: Simple syntax errors (e.g., missing parenthesis, typo in a variable name, incorrect operator).\n- Medium: Common logical errors (e.g., off-by-one, incorrect loop condition, misunderstanding 'this' context, scope issues).\n- Hard: More complex logical errors (e.g., uncontrolled recursion, mutation of state in functional contexts, incorrect asynchronous logic).\n- Heavy Hard: Subtle, advanced errors (e.g., race conditions, floating point imprecision, closure issues in loops, memory leaks).\n\nGenerate a code example for '{{language}}' on the topic '{{topic}}' with a '{{difficulty}}' level error.\nProvide a concise title and a one-sentence description for the example that are relevant to the topic.`,\n});\n\nconst generateCodeExampleFlow = ai.defineFlow(\n  {\n    name: 'generateCodeExampleFlow',\n    inputSchema: GenerateCodeExampleInputSchema,\n    outputSchema: GenerateCodeExampleOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAGO,eAAe,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;;sGAe2F,CAAC;AACvG;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/practice/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {explainCode as '409ab27ac407a98400bab86235173070f0f9437c42'} from 'ACTIONS_MODULE0'\nexport {generateCodeExample as '4000b094df142172b940a618d089a10164d4ce1a27'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 447, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/practice/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/practice/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/practice/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6R,GAC1T,2DACA","debugId":null}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/practice/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/practice/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/practice/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyQ,GACtS,uCACA","debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}