{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-xl font-semibold leading-none tracking-tight md:text-2xl\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,gKAAA,CAAA,OAAkB;AAE/B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,gKAAA,CAAA,OAAkB;QACjB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,8FACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG,gKAAA,CAAA,OAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,gKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,uYACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,gKAAA,CAAA,UAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,gKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,mIACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,gKAAA,CAAA,UAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/explain-code.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A Genkit flow for explaining code snippets.\n *\n * - explainCode - A function that takes a code snippet and returns an explanation.\n * - ExplainCodeInput - The input type for the explainCode function.\n * - ExplainCodeOutput - The return type for the explainCode function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ExplainCodeInputSchema = z.object({\n  code: z.string().describe('The code snippet to be explained.'),\n});\nexport type ExplainCodeInput = z.infer<typeof ExplainCodeInputSchema>;\n\nconst ExplainCodeOutputSchema = z.object({\n  explanation: z.string().describe('A detailed explanation of the code, formatted in Markdown.'),\n});\nexport type ExplainCodeOutput = z.infer<typeof ExplainCodeOutputSchema>;\n\nexport async function explainCode(input: ExplainCodeInput): Promise<ExplainCodeOutput> {\n  return explainCodeFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'explainCodePrompt',\n  input: {schema: ExplainCodeInputSchema},\n  output: {schema: ExplainCodeOutputSchema},\n  prompt: `You are an expert programming tutor who is friendly and encouraging.\nYour task is to explain the provided code snippet to a beginner.\n\nFollow these steps:\n1.  **High-Level Summary:** Start with a one-sentence summary of what the code does.\n2.  **Line-by-Line or Block-by-Block Explanation:** Break down the code into logical parts and explain each one. Use simple language.\n3.  **Key Concepts:** Briefly explain any important programming concepts demonstrated in the code (e.g., variables, functions, loops, scope).\n4.  **Potential Improvements (Optional):** If applicable, gently suggest one or two ways the code could be improved or written differently, explaining the benefits.\n5.  **Output:** Explain what the expected output of the code will be when it's run.\n\nFormat your entire response in simple Markdown. Use bullet points for lists and backticks for code elements.\n\nCode to explain:\n\\`\\`\\`javascript\n{{{code}}}\n\\`\\`\\`\n`,\n});\n\nconst explainCodeFlow = ai.defineFlow(\n  {\n    name: 'explainCodeFlow',\n    inputSchema: ExplainCodeInputSchema,\n    outputSchema: ExplainCodeOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAsBsB,cAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-code-example.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI-powered tool to generate code examples with common errors.\n *\n * - generateCodeExample - A function that takes a language, topic, and difficulty and returns a code example.\n * - GenerateCodeExampleInput - The input type for the generateCodeExample function.\n * - GenerateCodeExampleOutput - The return type for the generateCodeExample function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateCodeExampleInputSchema = z.object({\n  language: z.string().describe('The programming language for the code example (e.g., JavaScript, Python).'),\n  difficulty: z.string().describe(\"The difficulty level of the error in the code ('Easy', 'Medium', 'Hard', 'Heavy Hard').\"),\n  topic: z.string().describe(\"The specific programming topic or concept for the code example.\"),\n});\nexport type GenerateCodeExampleInput = z.infer<typeof GenerateCodeExampleInputSchema>;\n\nconst GenerateCodeExampleOutputSchema = z.object({\n  title: z.string().describe(\"A concise title for the code example.\"),\n  description: z.string().describe(\"A brief, one-sentence description of the concept or error demonstrated.\"),\n  code: z.string().describe(\"The code snippet containing a deliberate error appropriate for the specified language and difficulty.\"),\n});\nexport type GenerateCodeExampleOutput = z.infer<typeof GenerateCodeExampleOutputSchema>;\n\nexport async function generateCodeExample(input: GenerateCodeExampleInput): Promise<GenerateCodeExampleOutput> {\n  return generateCodeExampleFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateCodeExamplePrompt',\n  input: {schema: GenerateCodeExampleInputSchema},\n  output: {schema: GenerateCodeExampleOutputSchema},\n  prompt: `You are an expert programming instructor who creates educational code examples with deliberate errors.\nYour task is to generate a code snippet in '{{language}}' about the topic of '{{topic}}'.\nThe code **absolutely must contain one single, common, non-obvious error** corresponding to a '{{difficulty}}' difficulty level.\n\nIt is critical that the code has an error. The code should look correct at a glance but produce an incorrect result or a runtime error when executed.\nDo not add any comments explaining the error in the code itself. The purpose is for the user to find and fix it.\nThe error should be something a learner at the specified difficulty level could reasonably be expected to identify and fix.\n\nDifficulty Guide:\n- Easy: Simple syntax errors (e.g., missing parenthesis, typo in a variable name, incorrect operator).\n- Medium: Common logical errors (e.g., off-by-one, incorrect loop condition, misunderstanding 'this' context, scope issues).\n- Hard: More complex logical errors (e.g., uncontrolled recursion, mutation of state in functional contexts, incorrect asynchronous logic).\n- Heavy Hard: Subtle, advanced errors (e.g., race conditions, floating point imprecision, closure issues in loops, memory leaks).\n\nGenerate a code example for '{{language}}' on the topic '{{topic}}' with a '{{difficulty}}' level error.\nProvide a concise title and a one-sentence description for the example that are relevant to the topic.`,\n});\n\nconst generateCodeExampleFlow = ai.defineFlow(\n  {\n    name: 'generateCodeExampleFlow',\n    inputSchema: GenerateCodeExampleInputSchema,\n    outputSchema: GenerateCodeExampleOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IA0BsB,sBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/practice/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useState, useEffect, useRef } from 'react';\nimport Image from 'next/image';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Alert, AlertTitle, AlertDescription } from \"@/components/ui/alert\";\nimport { Code, FileCode, Play, RefreshCw, Copy, Save, BrainCircuit, Loader2, CheckCircle, XCircle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { explainCode } from '@/ai/flows/explain-code';\nimport { useLanguage } from '@/context/language-provider';\nimport { cn } from '@/lib/utils';\nimport { generateCodeExample } from '@/ai/flows/generate-code-example';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\n\nconst initialCode = `// Welcome to the Practice Zone!\n// Try writing some code and run it to see the output\n\nfunction greetUser(name) {\n  return 'Hello, ' + name + '! Welcome to LearnCode.';\n}\n\n// Test the function\nconsole.log(greetUser(\"Programmer\"));\n\n// Try modifying the code and run it again!`;\n\nexport default function PracticePage() {\n    const [code, setCode] = useState(initialCode);\n    const [output, setOutput] = useState(\"\");\n    const [error, setError] = useState<{ message: string, lineNumber: number | null } | null>(null);\n    const [explanation, setExplanation] = useState(\"\");\n    const { toast } = useToast();\n    const { t } = useLanguage();\n    const [isRunning, setIsRunning] = useState(false);\n    const [isExplaining, setIsExplaining] = useState(false);\n    const [activeTab, setActiveTab] = useState(\"editor\");\n    const workerRef = useRef<Worker | null>(null);\n    \n    const [isGenerating, setIsGenerating] = useState(false);\n    const [selectedLanguage, setSelectedLanguage] = useState(\"javascript\");\n    const [topic, setTopic] = useState(\"\");\n    const [difficulty, setDifficulty] = useState(\"Medium\");\n    const [generatedTitle, setGeneratedTitle] = useState(\"\");\n    const [generatedDescription, setGeneratedDescription] = useState(\"\");\n\n    const parseLineNumber = (stack: string): number | null => {\n        const match = /<anonymous>:(\\d+):/.exec(stack);\n        if (match && match[1]) {\n            return parseInt(match[1], 10);\n        }\n        return null;\n    }\n\n    useEffect(() => {\n        workerRef.current = new Worker('/code-runner.js');\n\n        workerRef.current.onmessage = (e) => {\n            const { output: workerOutput, error: workerError } = e.data;\n            if (workerError) {\n                const lineNumber = parseLineNumber(workerError.stack);\n                setOutput('Error: ' + workerError.message);\n                setError({ message: workerError.message, lineNumber });\n            } else {\n                setOutput(workerOutput || \"Code executed successfully with no output.\");\n                setError(null);\n            }\n            setIsRunning(false);\n        };\n        \n        workerRef.current.onerror = (e) => {\n            setOutput('An error occurred in the code runner: ' + e.message);\n            setIsRunning(false);\n        };\n\n        return () => {\n            workerRef.current?.terminate();\n        };\n    }, []);\n\n    const handleRunCode = () => {\n        if (!workerRef.current) return;\n        \n        setIsRunning(true);\n        setOutput(\"Running code...\");\n        setError(null);\n        setActiveTab(\"output\");\n        workerRef.current.postMessage({ code });\n    };\n    \n    const handleCopy = () => {\n        navigator.clipboard.writeText(code);\n        toast({ title: t('code_copied_title'), description: t('code_copied_desc') });\n    };\n\n    const handleExplainCode = async () => {\n        if (!code.trim()) {\n            toast({ title: t('cannot_explain_empty_title'), description: t('cannot_explain_empty_desc'), variant: 'destructive' });\n            return;\n        }\n        setIsExplaining(true);\n        setExplanation(\"\");\n        setActiveTab(\"explanation\");\n        try {\n            const result = await explainCode({ code });\n            setExplanation(result.explanation);\n        } catch (error) {\n            console.error(error);\n            setExplanation(\"Sorry, I had trouble explaining that code. Please check the console for details.\");\n            toast({ title: t('ai_explanation_failed_title'), description: t('ai_explanation_failed_desc'), variant: 'destructive' });\n        } finally {\n            setIsExplaining(false);\n        }\n    };\n    \n    const handleGenerateExample = async () => {\n        if (!topic) {\n            toast({ title: \"Topic is required\", description: \"Please enter a topic to generate an example.\", variant: \"destructive\" });\n            return;\n        }\n        setIsGenerating(true);\n        setCode(\"// Generating example...\");\n        setGeneratedTitle(\"\");\n        setGeneratedDescription(\"\");\n        setExplanation(\"\");\n        setOutput(\"\");\n        setError(null);\n\n        try {\n            const result = await generateCodeExample({\n                language: selectedLanguage,\n                topic,\n                difficulty\n            });\n            setCode(result.code);\n            setGeneratedTitle(result.title);\n            setGeneratedDescription(result.description);\n            setActiveTab(\"editor\");\n        } catch (error) {\n            console.error(\"Failed to generate code example:\", error);\n            toast({ title: \"Generation Failed\", description: \"Could not generate an example. Please try again.\", variant: \"destructive\" });\n            setCode(\"// Failed to generate example. Please try again.\");\n        } finally {\n            setIsGenerating(false);\n        }\n    };\n\n\n    return (\n        <>\n            <div className=\"flex items-center gap-4 mb-8\">\n                <FileCode size={40} className=\"text-primary shrink-0\" />\n                <div>\n                    <h1 className=\"font-headline text-3xl font-bold text-primary\">{t('practice_and_examples')}</h1>\n                    <p className=\"text-lg text-muted-foreground\">{t('practice_skills_interactive')}</p>\n                </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 items-start\">\n                {/* Left Column: Code Examples */}\n                <div className=\"lg:col-span-1 space-y-4\">\n                     <Card>\n                        <CardHeader>\n                            <CardTitle>Generate Error Example</CardTitle>\n                            <CardDescription>Create a custom code challenge with a hidden error.</CardDescription>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"topic\">Topic</Label>\n                                <Input id=\"topic\" value={topic} onChange={(e) => setTopic(e.target.value)} placeholder=\"e.g., JavaScript closures\" />\n                            </div>\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"difficulty\">Difficulty</Label>\n                                <Select value={difficulty} onValueChange={(value) => setDifficulty(value)}>\n                                    <SelectTrigger>\n                                        <SelectValue placeholder=\"Select difficulty\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                        <SelectItem value=\"Easy\">Easy</SelectItem>\n                                        <SelectItem value=\"Medium\">Medium</SelectItem>\n                                        <SelectItem value=\"Hard\">Hard</SelectItem>\n                                        <SelectItem value=\"Heavy Hard\">Heavy Hard</SelectItem>\n                                    </SelectContent>\n                                </Select>\n                            </div>\n                            <Button onClick={handleGenerateExample} disabled={isGenerating} className=\"w-full\">\n                                {isGenerating ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <BrainCircuit className=\"mr-2 h-4 w-4\" />}\n                                {isGenerating ? \"Generating...\" : \"Generate Example\"}\n                            </Button>\n                        </CardContent>\n                    </Card>\n                    {generatedTitle && (\n                        <Card>\n                            <CardHeader>\n                                <CardTitle>{generatedTitle}</CardTitle>\n                                <CardDescription>{generatedDescription}</CardDescription>\n                            </CardHeader>\n                        </Card>\n                    )}\n                </div>\n\n                {/* Right Column: Interactive Code Editor */}\n                <div className=\"lg:col-span-2\">\n                    <Card>\n                         <CardHeader>\n                            <div className=\"flex flex-wrap items-center justify-between gap-4\">\n                                <CardTitle className=\"text-xl flex items-center gap-2\"><Code className=\"h-5 w-5\" /> {t('interactive_code_editor')}</CardTitle>\n                                <div className=\"flex items-center gap-2\">\n                                    <Select value={selectedLanguage} onValueChange={(val) => setSelectedLanguage(val)}>\n                                        <SelectTrigger className=\"w-[180px]\">\n                                            <div className='flex items-center gap-2'>\n                                                <Image src=\"https://placehold.co/16x16.png\" width={16} height={16} alt=\"JS\" data-ai-hint=\"javascript logo\" />\n                                                <SelectValue placeholder={t('language')} />\n                                            </div>\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                            <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                                            <SelectItem value=\"python\">Python</SelectItem>\n                                        </SelectContent>\n                                    </Select>\n                                    <Button onClick={handleRunCode} disabled={isRunning} className=\"bg-green-600 hover:bg-green-700 text-white w-[90px]\">\n                                        {isRunning ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Play className=\"mr-2 h-4 w-4\" />}\n                                        {isRunning ? t('running') : t('run')}\n                                    </Button>\n                                </div>\n                            </div>\n                             <div className=\"flex items-center gap-2 pt-4 mt-4 border-t -mx-6 px-6\">\n                                <Button variant=\"ghost\" size=\"sm\" onClick={handleExplainCode} disabled={isExplaining}>\n                                    <BrainCircuit /> {isExplaining ? t('ai_explaining') : t('explain_code')}\n                                </Button>\n                                <Button variant=\"ghost\" size=\"sm\" onClick={handleCopy}><Copy /> {t('copy_code')}</Button>\n                                <Button variant=\"ghost\" size=\"sm\" onClick={() => setCode(initialCode)}><RefreshCw /> {t('reset_code')}</Button>\n                                <Button variant=\"ghost\" size=\"sm\" onClick={() => toast({ title: t('save_feature_soon_title'), description: t('save_feature_soon_desc')})}><Save /> {t('save_feature')}</Button>\n                            </div>\n                        </CardHeader>\n                        <CardContent>\n                            <Tabs value={activeTab} onValueChange={setActiveTab}>\n                                <TabsList className=\"grid w-full grid-cols-3\">\n                                    <TabsTrigger value=\"editor\">{t('editor')}</TabsTrigger>\n                                    <TabsTrigger value=\"output\">{t('output')}</TabsTrigger>\n                                    <TabsTrigger value=\"explanation\">{t('ai_explanation')}</TabsTrigger>\n                                </TabsList>\n                                <TabsContent value=\"editor\">\n                                    <Textarea \n                                        value={code}\n                                        onChange={(e) => setCode(e.target.value)}\n                                        className=\"font-mono h-96 bg-muted/50 dark:bg-zinc-900 rounded-md border\" \n                                        placeholder=\"Write your code here...\"\n                                    />\n                                </TabsContent>\n                                <TabsContent value=\"output\">\n                                    <div className={cn(\n                                        \"font-mono h-96 rounded-md border p-4 overflow-auto transition-colors text-sm\",\n                                        !output && \"bg-muted\",\n                                        output && error && \"bg-red-50 dark:bg-destructive/10 border-destructive/30\",\n                                        output && !error && \"bg-green-50 dark:bg-green-950/30 border-green-500/30\"\n                                    )}>\n                                        {isRunning ? (\n                                            <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                                                <Loader2 className=\"h-6 w-6 animate-spin\" />\n                                                <p className=\"ml-3\">{t('running')}</p>\n                                            </div>\n                                        ) : error ? (\n                                            <div className=\"flex items-start gap-4 text-destructive\">\n                                                <XCircle className=\"h-5 w-5 flex-shrink-0 mt-0.5\" />\n                                                <div>\n                                                    <h3 className=\"font-bold mb-2\">Error on line {error.lineNumber || 'N/A'}</h3>\n                                                    <pre className=\"font-mono text-sm whitespace-pre-wrap\">{error.message}</pre>\n                                                </div>\n                                            </div>\n                                        ) : output ? (\n                                            <div className=\"flex items-start gap-4 text-green-700 dark:text-green-300\">\n                                                <CheckCircle className=\"h-5 w-5 flex-shrink-0 mt-0.5\" />\n                                                <div>\n                                                    <h3 className=\"font-bold mb-2\">Success!</h3>\n                                                    <pre className=\"whitespace-pre-wrap\">{output}</pre>\n                                                </div>\n                                            </div>\n                                        ) : (\n                                            <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                                                <p>{t('run_to_see_output')}</p>\n                                            </div>\n                                        )}\n                                    </div>\n                                </TabsContent>\n                                 <TabsContent value=\"explanation\">\n                                    <div className=\"font-sans h-96 bg-muted rounded-md border p-4 overflow-auto\">\n                                        {isExplaining && (\n                                            <div className=\"flex items-center justify-center h-full\">\n                                                <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                                                <p className=\"ml-4 text-muted-foreground\">{t('ai_is_thinking')}</p>\n                                            </div>\n                                        )}\n                                        {explanation && !isExplaining && (\n                                            <p className=\"text-sm whitespace-pre-wrap\">{explanation}</p>\n                                        )}\n                                        {!explanation && !isExplaining && (\n                                            <div className=\"flex flex-col items-center justify-center h-full text-center text-muted-foreground\">\n                                                <BrainCircuit className=\"h-12 w-12 mb-4\" />\n                                                <p>{t('click_ai_button_for_explanation')}</p>\n                                            </div>\n                                        )}\n                                    </div>\n                                </TabsContent>\n                            </Tabs>\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        </>\n    );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;;;;;;;;;;;;;;;;;AAoBA,MAAM,cAAc,CAAC;;;;;;;;;;2CAUsB,CAAC;AAE7B,SAAS;IACpB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAyD;IAC1F,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IACzB,MAAM,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,cAAW,AAAD;IACxB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAiB;IAExC,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,sBAAsB,wBAAwB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEjE,MAAM,kBAAkB,CAAC;QACrB,MAAM,QAAQ,qBAAqB,IAAI,CAAC;QACxC,IAAI,SAAS,KAAK,CAAC,EAAE,EAAE;YACnB,OAAO,SAAS,KAAK,CAAC,EAAE,EAAE;QAC9B;QACA,OAAO;IACX;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,UAAU,OAAO,GAAG,IAAI,OAAO;QAE/B,UAAU,OAAO,CAAC,SAAS,GAAG,CAAC;YAC3B,MAAM,EAAE,QAAQ,YAAY,EAAE,OAAO,WAAW,EAAE,GAAG,EAAE,IAAI;YAC3D,IAAI,aAAa;gBACb,MAAM,aAAa,gBAAgB,YAAY,KAAK;gBACpD,UAAU,YAAY,YAAY,OAAO;gBACzC,SAAS;oBAAE,SAAS,YAAY,OAAO;oBAAE;gBAAW;YACxD,OAAO;gBACH,UAAU,gBAAgB;gBAC1B,SAAS;YACb;YACA,aAAa;QACjB;QAEA,UAAU,OAAO,CAAC,OAAO,GAAG,CAAC;YACzB,UAAU,2CAA2C,EAAE,OAAO;YAC9D,aAAa;QACjB;QAEA,OAAO;YACH,UAAU,OAAO,EAAE;QACvB;IACJ,GAAG,EAAE;IAEL,MAAM,gBAAgB;QAClB,IAAI,CAAC,UAAU,OAAO,EAAE;QAExB,aAAa;QACb,UAAU;QACV,SAAS;QACT,aAAa;QACb,UAAU,OAAO,CAAC,WAAW,CAAC;YAAE;QAAK;IACzC;IAEA,MAAM,aAAa;QACf,UAAU,SAAS,CAAC,SAAS,CAAC;QAC9B,MAAM;YAAE,OAAO,EAAE;YAAsB,aAAa,EAAE;QAAoB;IAC9E;IAEA,MAAM,oBAAoB;QACtB,IAAI,CAAC,KAAK,IAAI,IAAI;YACd,MAAM;gBAAE,OAAO,EAAE;gBAA+B,aAAa,EAAE;gBAA8B,SAAS;YAAc;YACpH;QACJ;QACA,gBAAgB;QAChB,eAAe;QACf,aAAa;QACb,IAAI;YACA,MAAM,SAAS,MAAM,CAAA,GAAA,0JAAA,CAAA,cAAW,AAAD,EAAE;gBAAE;YAAK;YACxC,eAAe,OAAO,WAAW;QACrC,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC;YACd,eAAe;YACf,MAAM;gBAAE,OAAO,EAAE;gBAAgC,aAAa,EAAE;gBAA+B,SAAS;YAAc;QAC1H,SAAU;YACN,gBAAgB;QACpB;IACJ;IAEA,MAAM,wBAAwB;QAC1B,IAAI,CAAC,OAAO;YACR,MAAM;gBAAE,OAAO;gBAAqB,aAAa;gBAAgD,SAAS;YAAc;YACxH;QACJ;QACA,gBAAgB;QAChB,QAAQ;QACR,kBAAkB;QAClB,wBAAwB;QACxB,eAAe;QACf,UAAU;QACV,SAAS;QAET,IAAI;YACA,MAAM,SAAS,MAAM,CAAA,GAAA,0JAAA,CAAA,sBAAmB,AAAD,EAAE;gBACrC,UAAU;gBACV;gBACA;YACJ;YACA,QAAQ,OAAO,IAAI;YACnB,kBAAkB,OAAO,KAAK;YAC9B,wBAAwB,OAAO,WAAW;YAC1C,aAAa;QACjB,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,oCAAoC;YAClD,MAAM;gBAAE,OAAO;gBAAqB,aAAa;gBAAoD,SAAS;YAAc;YAC5H,QAAQ;QACZ,SAAU;YACN,gBAAgB;QACpB;IACJ;IAGA,qBACI;;0BACI,8OAAC;gBAAI,WAAU;;kCACX,8OAAC,8MAAA,CAAA,WAAQ;wBAAC,MAAM;wBAAI,WAAU;;;;;;kCAC9B,8OAAC;;0CACG,8OAAC;gCAAG,WAAU;0CAAiD,EAAE;;;;;;0CACjE,8OAAC;gCAAE,WAAU;0CAAiC,EAAE;;;;;;;;;;;;;;;;;;0BAIxD,8OAAC;gBAAI,WAAU;;kCAEX,8OAAC;wBAAI,WAAU;;0CACV,8OAAC,gIAAA,CAAA,OAAI;;kDACF,8OAAC,gIAAA,CAAA,aAAU;;0DACP,8OAAC,gIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,8OAAC,gIAAA,CAAA,kBAAe;0DAAC;;;;;;;;;;;;kDAErB,8OAAC,gIAAA,CAAA,cAAW;wCAAC,WAAU;;0DACnB,8OAAC;gDAAI,WAAU;;kEACX,8OAAC,iIAAA,CAAA,QAAK;wDAAC,SAAQ;kEAAQ;;;;;;kEACvB,8OAAC,iIAAA,CAAA,QAAK;wDAAC,IAAG;wDAAQ,OAAO;wDAAO,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;wDAAG,aAAY;;;;;;;;;;;;0DAE3F,8OAAC;gDAAI,WAAU;;kEACX,8OAAC,iIAAA,CAAA,QAAK;wDAAC,SAAQ;kEAAa;;;;;;kEAC5B,8OAAC,kIAAA,CAAA,SAAM;wDAAC,OAAO;wDAAY,eAAe,CAAC,QAAU,cAAc;;0EAC/D,8OAAC,kIAAA,CAAA,gBAAa;0EACV,cAAA,8OAAC,kIAAA,CAAA,cAAW;oEAAC,aAAY;;;;;;;;;;;0EAE7B,8OAAC,kIAAA,CAAA,gBAAa;;kFACV,8OAAC,kIAAA,CAAA,aAAU;wEAAC,OAAM;kFAAO;;;;;;kFACzB,8OAAC,kIAAA,CAAA,aAAU;wEAAC,OAAM;kFAAS;;;;;;kFAC3B,8OAAC,kIAAA,CAAA,aAAU;wEAAC,OAAM;kFAAO;;;;;;kFACzB,8OAAC,kIAAA,CAAA,aAAU;wEAAC,OAAM;kFAAa;;;;;;;;;;;;;;;;;;;;;;;;0DAI3C,8OAAC,kIAAA,CAAA,SAAM;gDAAC,SAAS;gDAAuB,UAAU;gDAAc,WAAU;;oDACrE,6BAAe,8OAAC,iNAAA,CAAA,UAAO;wDAAC,WAAU;;;;;6EAAiC,8OAAC,sNAAA,CAAA,eAAY;wDAAC,WAAU;;;;;;oDAC3F,eAAe,kBAAkB;;;;;;;;;;;;;;;;;;;4BAI7C,gCACG,8OAAC,gIAAA,CAAA,OAAI;0CACD,cAAA,8OAAC,gIAAA,CAAA,aAAU;;sDACP,8OAAC,gIAAA,CAAA,YAAS;sDAAE;;;;;;sDACZ,8OAAC,gIAAA,CAAA,kBAAe;sDAAE;;;;;;;;;;;;;;;;;;;;;;;kCAOlC,8OAAC;wBAAI,WAAU;kCACX,cAAA,8OAAC,gIAAA,CAAA,OAAI;;8CACA,8OAAC,gIAAA,CAAA,aAAU;;sDACR,8OAAC;4CAAI,WAAU;;8DACX,8OAAC,gIAAA,CAAA,YAAS;oDAAC,WAAU;;sEAAkC,8OAAC,kMAAA,CAAA,OAAI;4DAAC,WAAU;;;;;;wDAAY;wDAAE,EAAE;;;;;;;8DACvF,8OAAC;oDAAI,WAAU;;sEACX,8OAAC,kIAAA,CAAA,SAAM;4DAAC,OAAO;4DAAkB,eAAe,CAAC,MAAQ,oBAAoB;;8EACzE,8OAAC,kIAAA,CAAA,gBAAa;oEAAC,WAAU;8EACrB,cAAA,8OAAC;wEAAI,WAAU;;0FACX,8OAAC,6HAAA,CAAA,UAAK;gFAAC,KAAI;gFAAiC,OAAO;gFAAI,QAAQ;gFAAI,KAAI;gFAAK,gBAAa;;;;;;0FACzF,8OAAC,kIAAA,CAAA,cAAW;gFAAC,aAAa,EAAE;;;;;;;;;;;;;;;;;8EAGpC,8OAAC,kIAAA,CAAA,gBAAa;;sFACV,8OAAC,kIAAA,CAAA,aAAU;4EAAC,OAAM;sFAAa;;;;;;sFAC/B,8OAAC,kIAAA,CAAA,aAAU;4EAAC,OAAM;sFAAS;;;;;;;;;;;;;;;;;;sEAGnC,8OAAC,kIAAA,CAAA,SAAM;4DAAC,SAAS;4DAAe,UAAU;4DAAW,WAAU;;gEAC1D,0BAAY,8OAAC,iNAAA,CAAA,UAAO;oEAAC,WAAU;;;;;yFAAiC,8OAAC,kMAAA,CAAA,OAAI;oEAAC,WAAU;;;;;;gEAChF,YAAY,EAAE,aAAa,EAAE;;;;;;;;;;;;;;;;;;;sDAIzC,8OAAC;4CAAI,WAAU;;8DACZ,8OAAC,kIAAA,CAAA,SAAM;oDAAC,SAAQ;oDAAQ,MAAK;oDAAK,SAAS;oDAAmB,UAAU;;sEACpE,8OAAC,sNAAA,CAAA,eAAY;;;;;wDAAG;wDAAE,eAAe,EAAE,mBAAmB,EAAE;;;;;;;8DAE5D,8OAAC,kIAAA,CAAA,SAAM;oDAAC,SAAQ;oDAAQ,MAAK;oDAAK,SAAS;;sEAAY,8OAAC,kMAAA,CAAA,OAAI;;;;;wDAAG;wDAAE,EAAE;;;;;;;8DACnE,8OAAC,kIAAA,CAAA,SAAM;oDAAC,SAAQ;oDAAQ,MAAK;oDAAK,SAAS,IAAM,QAAQ;;sEAAc,8OAAC,gNAAA,CAAA,YAAS;;;;;wDAAG;wDAAE,EAAE;;;;;;;8DACxF,8OAAC,kIAAA,CAAA,SAAM;oDAAC,SAAQ;oDAAQ,MAAK;oDAAK,SAAS,IAAM,MAAM;4DAAE,OAAO,EAAE;4DAA4B,aAAa,EAAE;wDAAyB;;sEAAI,8OAAC,kMAAA,CAAA,OAAI;;;;;wDAAG;wDAAE,EAAE;;;;;;;;;;;;;;;;;;;8CAG9J,8OAAC,gIAAA,CAAA,cAAW;8CACR,cAAA,8OAAC,gIAAA,CAAA,OAAI;wCAAC,OAAO;wCAAW,eAAe;;0DACnC,8OAAC,gIAAA,CAAA,WAAQ;gDAAC,WAAU;;kEAChB,8OAAC,gIAAA,CAAA,cAAW;wDAAC,OAAM;kEAAU,EAAE;;;;;;kEAC/B,8OAAC,gIAAA,CAAA,cAAW;wDAAC,OAAM;kEAAU,EAAE;;;;;;kEAC/B,8OAAC,gIAAA,CAAA,cAAW;wDAAC,OAAM;kEAAe,EAAE;;;;;;;;;;;;0DAExC,8OAAC,gIAAA,CAAA,cAAW;gDAAC,OAAM;0DACf,cAAA,8OAAC,oIAAA,CAAA,WAAQ;oDACL,OAAO;oDACP,UAAU,CAAC,IAAM,QAAQ,EAAE,MAAM,CAAC,KAAK;oDACvC,WAAU;oDACV,aAAY;;;;;;;;;;;0DAGpB,8OAAC,gIAAA,CAAA,cAAW;gDAAC,OAAM;0DACf,cAAA,8OAAC;oDAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACb,gFACA,CAAC,UAAU,YACX,UAAU,SAAS,0DACnB,UAAU,CAAC,SAAS;8DAEnB,0BACG,8OAAC;wDAAI,WAAU;;0EACX,8OAAC,iNAAA,CAAA,UAAO;gEAAC,WAAU;;;;;;0EACnB,8OAAC;gEAAE,WAAU;0EAAQ,EAAE;;;;;;;;;;;+DAE3B,sBACA,8OAAC;wDAAI,WAAU;;0EACX,8OAAC,4MAAA,CAAA,UAAO;gEAAC,WAAU;;;;;;0EACnB,8OAAC;;kFACG,8OAAC;wEAAG,WAAU;;4EAAiB;4EAAe,MAAM,UAAU,IAAI;;;;;;;kFAClE,8OAAC;wEAAI,WAAU;kFAAyC,MAAM,OAAO;;;;;;;;;;;;;;;;;+DAG7E,uBACA,8OAAC;wDAAI,WAAU;;0EACX,8OAAC,2NAAA,CAAA,cAAW;gEAAC,WAAU;;;;;;0EACvB,8OAAC;;kFACG,8OAAC;wEAAG,WAAU;kFAAiB;;;;;;kFAC/B,8OAAC;wEAAI,WAAU;kFAAuB;;;;;;;;;;;;;;;;;6EAI9C,8OAAC;wDAAI,WAAU;kEACX,cAAA,8OAAC;sEAAG,EAAE;;;;;;;;;;;;;;;;;;;;;0DAKrB,8OAAC,gIAAA,CAAA,cAAW;gDAAC,OAAM;0DAChB,cAAA,8OAAC;oDAAI,WAAU;;wDACV,8BACG,8OAAC;4DAAI,WAAU;;8EACX,8OAAC,iNAAA,CAAA,UAAO;oEAAC,WAAU;;;;;;8EACnB,8OAAC;oEAAE,WAAU;8EAA8B,EAAE;;;;;;;;;;;;wDAGpD,eAAe,CAAC,8BACb,8OAAC;4DAAE,WAAU;sEAA+B;;;;;;wDAE/C,CAAC,eAAe,CAAC,8BACd,8OAAC;4DAAI,WAAU;;8EACX,8OAAC,sNAAA,CAAA,eAAY;oEAAC,WAAU;;;;;;8EACxB,8OAAC;8EAAG,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYtD","debugId":null}}]
}