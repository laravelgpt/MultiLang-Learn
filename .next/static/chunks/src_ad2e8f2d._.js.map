{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/languageService.ts"],"sourcesContent":["\n'use server';\n\nimport { \n    languagesSummaryData, \n    languagesCurriculumData, \n    quickQuestionsData,\n    challengesData,\n    submissionsData,\n    type LanguageSummary, \n    type LanguageCurriculum,\n    type Topic,\n    type Lesson,\n    type Challenge,\n    type Submission\n} from \"@/lib/mock-data\";\n\n/**\n * In-memory data store for the application.\n * In a real-world application, these functions would interact with a database.\n */\n\n// ========== Language Summary Services ==========\n\nexport async function getLanguagesSummary(): Promise<LanguageSummary[]> {\n    // Simulate async database call\n    return Promise.resolve(languagesSummaryData);\n}\n\nexport async function addLanguageSummary(summary: LanguageSummary): Promise<void> {\n    languagesSummaryData.push(summary);\n    return Promise.resolve();\n}\n\nexport async function deleteLanguageSummary(langId: string): Promise<void> {\n    const index = languagesSummaryData.findIndex(l => l.id === langId);\n    if (index > -1) {\n        languagesSummaryData.splice(index, 1);\n    }\n    return Promise.resolve();\n}\n\n// ========== Language Curriculum Services ==========\n\nexport async function getLanguageCurriculum(langId: string): Promise<LanguageCurriculum | null> {\n    return Promise.resolve(languagesCurriculumData[langId] || null);\n}\n\nexport async function addLanguageCurriculum(langId: string, curriculum: LanguageCurriculum): Promise<void> {\n    languagesCurriculumData[langId] = curriculum;\n    return Promise.resolve();\n}\n\nexport async function deleteLanguageCurriculum(langId: string): Promise<void> {\n    delete languagesCurriculumData[langId];\n    return Promise.resolve();\n}\n\n// ========== Quick Question Services ==========\n\nexport async function getQuickQuestions(langId: string): Promise<string[] | undefined> {\n    return Promise.resolve(quickQuestionsData[langId]);\n}\n\nexport async function addQuickQuestions(langId: string, questions: string[]): Promise<void> {\n    quickQuestionsData[langId] = questions;\n    return Promise.resolve();\n}\n\n// ========== Topic Services ==========\n\nexport async function addTopic(langId: string, topic: Omit<Topic, 'id' | 'lessons'>): Promise<Topic | null> {\n    const curriculum = languagesCurriculumData[langId];\n    if (curriculum) {\n        const newTopic: Topic = {\n            ...topic,\n            id: `t-${langId}-${Date.now()}`,\n            lessons: [],\n        };\n        curriculum.topics.push(newTopic);\n        \n        const summary = languagesSummaryData.find(s => s.id === langId);\n        if (summary) {\n            summary.topics = curriculum.topics.length;\n        }\n\n        return Promise.resolve(newTopic);\n    }\n    return Promise.resolve(null);\n}\n\nexport async function updateTopic(langId: string, topicId: string, topicData: Partial<Topic>): Promise<Topic | null> {\n    const topic = languagesCurriculumData[langId]?.topics.find(t => t.id === topicId);\n    if (topic) {\n        Object.assign(topic, topicData);\n        return Promise.resolve(topic);\n    }\n    return Promise.resolve(null);\n}\n\nexport async function deleteTopic(langId: string, topicId: string): Promise<void> {\n    const curriculum = languagesCurriculumData[langId];\n    if (curriculum) {\n        const topicIndex = curriculum.topics.findIndex(t => t.id === topicId);\n        if (topicIndex > -1) {\n            curriculum.topics.splice(topicIndex, 1);\n            \n            const summary = languagesSummaryData.find(s => s.id === langId);\n            if (summary) {\n                summary.topics = curriculum.topics.length;\n            }\n        }\n    }\n    return Promise.resolve();\n}\n\n// ========== Lesson Services ==========\n\nexport async function addLesson(langId: string, topicId: string, lessonData: Omit<Lesson, 'id' | 'attachments'>): Promise<Lesson | null> {\n    const topic = languagesCurriculumData[langId]?.topics.find(t => t.id === topicId);\n    if (topic) {\n        const newLesson: Lesson = {\n            ...lessonData,\n            id: `l-${langId}-${topicId}-${Date.now()}`,\n            attachments: [],\n        };\n        topic.lessons.push(newLesson);\n\n        const summary = languagesSummaryData.find(s => s.id === langId);\n        if (summary) {\n            summary.lessons = (summary.lessons || 0) + 1;\n        }\n\n        return Promise.resolve(newLesson);\n    }\n    return Promise.resolve(null);\n}\n\nexport async function updateLesson(langId: string, topicId: string, lessonId: string, lessonData: Partial<Lesson>): Promise<Lesson | null> {\n    const topic = languagesCurriculumData[langId]?.topics.find(t => t.id === topicId);\n    if (topic) {\n        const lesson = topic.lessons.find(l => l.id === lessonId);\n        if (lesson) {\n            Object.assign(lesson, lessonData);\n            return Promise.resolve(lesson);\n        }\n    }\n    return Promise.resolve(null);\n}\n\nexport async function deleteLesson(langId: string, topicId: string, lessonId: string): Promise<void> {\n    const topic = languagesCurriculumData[langId]?.topics.find(t => t.id === topicId);\n    if (topic) {\n        const lessonIndex = topic.lessons.findIndex(l => l.id === lessonId);\n        if (lessonIndex > -1) {\n            topic.lessons.splice(lessonIndex, 1);\n\n            const summary = languagesSummaryData.find(s => s.id === langId);\n            if (summary) {\n                summary.lessons = (summary.lessons || 0) - 1;\n            }\n        }\n    }\n    return Promise.resolve();\n}\n\n// ========== Challenge Services ==========\n\nexport async function getChallenges(): Promise<Challenge[]> {\n    return Promise.resolve(challengesData);\n}\n\nexport async function getChallengeById(id: number): Promise<Challenge | undefined> {\n    return Promise.resolve(challengesData.find(c => c.id === id));\n}\n\nexport async function getSubmissions(): Promise<Submission[]> {\n    return Promise.resolve(submissionsData);\n}\n"],"names":[],"mappings":";;;;;;IA4KsB,mBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/explain-code.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A Genkit flow for explaining code snippets.\n *\n * - explainCode - A function that takes a code snippet and returns an explanation.\n * - ExplainCodeInput - The input type for the explainCode function.\n * - ExplainCodeOutput - The return type for the explainCode function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ExplainCodeInputSchema = z.object({\n  code: z.string().describe('The code snippet to be explained.'),\n});\nexport type ExplainCodeInput = z.infer<typeof ExplainCodeInputSchema>;\n\nconst ExplainCodeOutputSchema = z.object({\n  explanation: z.string().describe('A detailed explanation of the code, formatted in Markdown.'),\n});\nexport type ExplainCodeOutput = z.infer<typeof ExplainCodeOutputSchema>;\n\nexport async function explainCode(input: ExplainCodeInput): Promise<ExplainCodeOutput> {\n  return explainCodeFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'explainCodePrompt',\n  input: {schema: ExplainCodeInputSchema},\n  output: {schema: ExplainCodeOutputSchema},\n  prompt: `You are an expert programming tutor and code debugger.\nYour primary task is to analyze the provided code snippet for errors.\n\n**If you find an error:**\n1.  **Identify the Bug:** Clearly state what the error is.\n2.  **Explain the Cause:** Explain in simple terms why the error occurs.\n3.  **Provide the Fix:** Show the corrected code snippet.\n4.  **Explain the Fix:** Briefly explain why the corrected code works.\n\n**If the code is correct and contains no errors:**\n1.  **High-Level Summary:** Start with a one-sentence summary of what the code does.\n2.  **Line-by-Line Explanation:** Break down the code into logical parts and explain each one.\n3.  **Key Concepts:** Briefly explain any important programming concepts demonstrated.\n4.  **Output:** Explain what the expected output of the code will be when it's run.\n\nFormat your entire response in simple Markdown. Use code blocks for code snippets.\n\nCode to analyze:\n\\`\\`\\`\n{{{code}}}\n\\`\\`\\`\n`,\n});\n\nconst explainCodeFlow = ai.defineFlow(\n  {\n    name: 'explainCodeFlow',\n    inputSchema: ExplainCodeInputSchema,\n    outputSchema: ExplainCodeOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAsBsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-xl font-semibold leading-none tracking-tight md:text-2xl\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/skeleton.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OACkC;IACrC,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,qCAAqC;QAClD,GAAG,KAAK;;;;;;AAGf;KAVS","debugId":null}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,mKAAA,CAAA,OAAkB;AAE/B,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,OAAkB;QACjB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8FACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG,mKAAA,CAAA,OAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,uYACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,mIACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/challenges/%5BchallengeId%5D/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport Link from \"next/link\";\nimport { notFound } from \"next/navigation\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/context/language-provider\";\nimport { getChallengeById } from \"@/services/languageService\";\nimport type { Challenge } from \"@/lib/mock-data\";\nimport { explainCode } from \"@/ai/flows/explain-code\";\nimport { cn } from \"@/lib/utils\";\nimport ReactMarkdown from 'react-markdown';\n\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, BrainCircuit, CheckCircle, Code, Loader2, Play, Star, Trophy, XCircle } from \"lucide-react\";\n\n\nconst getBoilerplate = (lang: string) => {\n    switch (lang) {\n        case 'js':\n            return 'function solve() {\\n  // Your code here\\n}\\n\\nsolve();';\n        case 'py':\n            return 'def solve():\\n  # Your code here\\n  pass\\n\\nsolve()';\n        default:\n            return '// Start your solution here';\n    }\n};\n\nexport default function SolveChallengePage({ params }: { params: { challengeId: string } }) {\n    const { t } = useLanguage();\n    const { toast } = useToast();\n    const [challenge, setChallenge] = useState<Challenge | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    const [code, setCode] = useState(\"\");\n    const [output, setOutput] = useState(\"\");\n    const [error, setError] = useState<{ message: string, lineNumber: number | null } | null>(null);\n    const [explanation, setExplanation] = useState(\"\");\n    const [isRunning, setIsRunning] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [isExplaining, setIsExplaining] = useState(false);\n    const [activeTab, setActiveTab] = useState(\"output\");\n    const workerRef = useRef<Worker | null>(null);\n\n    // Worker setup\n    useEffect(() => {\n        workerRef.current = new Worker('/code-runner.js');\n        const parseLineNumber = (stack: string): number | null => {\n            const match = /<anonymous>:(\\d+):/.exec(stack);\n            return match?.[1] ? parseInt(match[1], 10) : null;\n        }\n        workerRef.current.onmessage = (e) => {\n            const { output: workerOutput, error: workerError } = e.data;\n            if (workerError) {\n                setOutput('Error: ' + workerError.message);\n                setError({ message: workerError.message, lineNumber: parseLineNumber(workerError.stack) });\n            } else {\n                setOutput(workerOutput || \"Code executed successfully with no output.\");\n                setError(null);\n            }\n            setIsRunning(false);\n        };\n        workerRef.current.onerror = (e) => {\n            setOutput('An error occurred: ' + e.message);\n            setIsRunning(false);\n        };\n        return () => workerRef.current?.terminate();\n    }, []);\n\n    useEffect(() => {\n        async function fetchChallenge() {\n            setIsLoading(true);\n            const challengeIdNum = parseInt(params.challengeId, 10);\n            if (isNaN(challengeIdNum)) {\n                return notFound();\n            }\n            const data = await getChallengeById(challengeIdNum);\n            if (!data) {\n                return notFound();\n            }\n            setChallenge(data);\n            setCode(getBoilerplate(data.language));\n            setIsLoading(false);\n        }\n        fetchChallenge();\n    }, [params.challengeId]);\n    \n    const handleRunCode = () => {\n        if (!workerRef.current) return;\n        setIsRunning(true);\n        setOutput(\"Running code...\");\n        setError(null);\n        setActiveTab(\"output\");\n        workerRef.current.postMessage({ code });\n    };\n\n    const handleSubmitCode = () => {\n        setIsSubmitting(true);\n        setTimeout(() => {\n            const isSuccess = Math.random() > 0.3; // Mock submission result\n            if(isSuccess) {\n                toast({ title: t('submission_accepted'), description: `You earned ${challenge?.points} points!` });\n            } else {\n                toast({ title: t('submission_failed'), description: \"One or more tests failed. Keep trying!\", variant: \"destructive\" });\n            }\n            setIsSubmitting(false);\n        }, 1500);\n    };\n\n    const handleDebugCode = async () => {\n        if (!code.trim()) return;\n        setIsExplaining(true);\n        setExplanation(\"\");\n        setActiveTab(\"explanation\");\n        try {\n            const result = await explainCode({ code });\n            setExplanation(result.explanation);\n        } catch (error) {\n            console.error(error);\n            setExplanation(\"Sorry, I had trouble explaining that code.\");\n            toast({ title: t('ai_explanation_failed_title'), variant: 'destructive' });\n        } finally {\n            setIsExplaining(false);\n        }\n    };\n\n\n    if (isLoading || !challenge) {\n        return <div className=\"p-8\"><Skeleton className=\"h-96 w-full\" /></div>;\n    }\n\n    return (\n        <div className=\"flex flex-col gap-6\">\n            <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"flex items-center gap-4\">\n                    <Trophy className=\"h-10 w-10 text-primary shrink-0\" />\n                    <div>\n                        <h1 className=\"font-headline text-3xl font-bold text-primary\">{challenge.title}</h1>\n                        <p className=\"text-lg text-muted-foreground\">{t('solve_challenge')}</p>\n                    </div>\n                </div>\n                 <Button asChild variant=\"outline\">\n                    <Link href=\"/challenges\">\n                        <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                        {t('back_to_challenges')}\n                    </Link>\n                </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 items-start\">\n                <Card className=\"lg:sticky lg:top-6\">\n                    <CardHeader>\n                        <CardTitle>Challenge Details</CardTitle>\n                        <div className=\"flex items-center gap-4 pt-2\">\n                             <Badge variant={\n                                challenge.difficulty === 'Easy' ? 'secondary' :\n                                challenge.difficulty === 'Medium' ? 'outline' : 'default'\n                            }>{challenge.difficulty}</Badge>\n                            <div className=\"flex items-center gap-1.5 text-yellow-500\">\n                                <Star className=\"h-4 w-4 fill-current\" />\n                                <span className=\"font-semibold text-sm text-muted-foreground\">{challenge.points} pts</span>\n                            </div>\n                        </div>\n                    </CardHeader>\n                    <CardContent>\n                        <ReactMarkdown className=\"prose prose-sm dark:prose-invert max-w-none\">\n                            {challenge.description}\n                        </ReactMarkdown>\n                    </CardContent>\n                </Card>\n\n                <Card>\n                    <CardHeader className=\"flex flex-row flex-wrap items-center justify-between gap-4\">\n                        <CardTitle className=\"flex items-center gap-2\">\n                            <Code className=\"h-6 w-6\" /> {t('your_solution')}\n                        </CardTitle>\n                        <div className=\"flex items-center gap-2\">\n                            <Button variant=\"secondary\" onClick={handleDebugCode} disabled={isExplaining}>\n                                <BrainCircuit className=\"mr-2\" />\n                                {isExplaining ? t('ai_explaining') : t('debug_code')}\n                            </Button>\n                            <Button onClick={handleRunCode} disabled={isRunning}>\n                                <Play className=\"mr-2\" />\n                                {isRunning ? t('running') : t('run_code')}\n                            </Button>\n                        </div>\n                    </CardHeader>\n                    <CardContent>\n                         <Textarea \n                            value={code}\n                            onChange={(e) => setCode(e.target.value)}\n                            className=\"font-mono h-80 bg-muted/50 dark:bg-zinc-900 rounded-md border\" \n                            placeholder=\"// Your code here...\"\n                        />\n                         <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mt-4\">\n                            <TabsList className=\"grid w-full grid-cols-2\">\n                                <TabsTrigger value=\"output\">{t('output')}</TabsTrigger>\n                                <TabsTrigger value=\"explanation\">{t('ai_explanation')}</TabsTrigger>\n                            </TabsList>\n                             <TabsContent value=\"output\">\n                                <div className={cn(\n                                    \"font-mono h-48 rounded-md border p-4 overflow-auto transition-colors text-sm\",\n                                    !output && \"bg-muted\",\n                                    output && error && \"bg-red-50 dark:bg-destructive/10 border-destructive/30\",\n                                    output && !error && \"bg-green-50 dark:bg-green-950/30 border-green-500/30\"\n                                )}>\n                                    {isRunning || isSubmitting ? (\n                                        <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                                            <Loader2 className=\"h-6 w-6 animate-spin\" />\n                                            <p className=\"ml-3\">{isRunning ? t('running') : t('submitting')}</p>\n                                        </div>\n                                    ) : error ? (\n                                        <div className=\"flex items-start gap-4 text-destructive\">\n                                            <XCircle className=\"h-5 w-5 flex-shrink-0 mt-0.5\" />\n                                            <div>\n                                                <h3 className=\"font-bold mb-2\">Error on line {error.lineNumber || 'N/A'}</h3>\n                                                <pre className=\"font-mono text-sm whitespace-pre-wrap\">{error.message}</pre>\n                                            </div>\n                                        </div>\n                                    ) : output ? (\n                                        <pre className=\"whitespace-pre-wrap\">{output}</pre>\n                                    ) : (\n                                        <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                                            <p>{t('run_to_see_output')}</p>\n                                        </div>\n                                    )}\n                                </div>\n                            </TabsContent>\n                             <TabsContent value=\"explanation\">\n                                <div className=\"font-sans h-48 bg-muted rounded-md border p-4 overflow-auto\">\n                                    {isExplaining && (\n                                        <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                                            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                                            <p className=\"ml-4\">{t('ai_is_thinking')}</p>\n                                        </div>\n                                    )}\n                                    {explanation && !isExplaining && (\n                                        <ReactMarkdown className=\"prose prose-sm dark:prose-invert max-w-none\">\n                                            {explanation}\n                                        </ReactMarkdown>\n                                    )}\n                                    {!explanation && !isExplaining && (\n                                        <div className=\"flex flex-col items-center justify-center h-full text-center text-muted-foreground\">\n                                            <BrainCircuit className=\"h-12 w-12 mb-4\" />\n                                            <p>{t('debugger_placeholder')}</p>\n                                        </div>\n                                    )}\n                                </div>\n                            </TabsContent>\n                        </Tabs>\n                        <Button className=\"w-full mt-4 bg-green-600 hover:bg-green-700 text-white\" onClick={handleSubmitCode} disabled={isSubmitting || isRunning}>\n                           {isSubmitting ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <CheckCircle className=\"mr-2 h-4 w-4\" />}\n                           {isSubmitting ? t('submitting') : t('submit')}\n                        </Button>\n                    </CardContent>\n                </Card>\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}