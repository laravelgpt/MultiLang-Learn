{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-xl font-semibold leading-none tracking-tight md:text-2xl\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC,6KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,6LAAC,6KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,6LAAC;;;;;0BACD,6LAAC,6KAAA,CAAA,SAA0B;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,6LAAC,6KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,6KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;MAjB7C;AAoBN,UAAU,WAAW,GAAG,6KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/chatbot.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A Genkit flow for a contextual chatbot.\n *\n * - chatbot - A function that takes a user query and language context.\n * - ChatbotInput - The input type for the chatbot function.\n * - ChatbotOutput - The return type for the chatbot function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ChatbotInputSchema = z.object({\n  query: z.string().describe(\"The user's question.\"),\n  language: z.string().describe('The programming language context for the question.'),\n});\nexport type ChatbotInput = z.infer<typeof ChatbotInputSchema>;\n\nconst ChatbotOutputSchema = z.object({\n  response: z.string().describe(\"The AI tutor's response, formatted in Markdown.\"),\n});\nexport type ChatbotOutput = z.infer<typeof ChatbotOutputSchema>;\n\nexport async function chatbot(input: ChatbotInput): Promise<ChatbotOutput> {\n  return chatbotFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'chatbotPrompt',\n  input: {schema: ChatbotInputSchema},\n  output: {schema: ChatbotOutputSchema},\n  prompt: `You are a friendly, encouraging, and expert programming tutor.\nYour current area of focus is {{language}}.\n\nA user has asked the following question:\n\"{{{query}}}\"\n\nPlease provide a clear, helpful, and concise answer.\nIf the question is about a different topic, gently guide them back to {{language}} or answer generally if appropriate.\nFormat your response in simple Markdown. Use backticks for code elements and code blocks for examples.`,\n});\n\nconst chatbotFlow = ai.defineFlow(\n  {\n    name: 'chatbotFlow',\n    inputSchema: ChatbotInputSchema,\n    outputSchema: ChatbotOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAuBsB,UAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/languageService.ts"],"sourcesContent":["\n'use server';\n\nimport { \n    languagesSummaryData, \n    languagesCurriculumData, \n    quickQuestionsData,\n    type LanguageSummary, \n    type LanguageCurriculum,\n    type Topic,\n    type Lesson\n} from \"@/lib/mock-data\";\n\n/**\n * In-memory data store for the application.\n * In a real-world application, these functions would interact with a database.\n */\n\n// ========== Language Summary Services ==========\n\nexport async function getLanguagesSummary(): Promise<LanguageSummary[]> {\n    // Simulate async database call\n    return Promise.resolve(languagesSummaryData);\n}\n\nexport async function addLanguageSummary(summary: LanguageSummary): Promise<void> {\n    languagesSummaryData.push(summary);\n    return Promise.resolve();\n}\n\nexport async function deleteLanguageSummary(langId: string): Promise<void> {\n    const index = languagesSummaryData.findIndex(l => l.id === langId);\n    if (index > -1) {\n        languagesSummaryData.splice(index, 1);\n    }\n    return Promise.resolve();\n}\n\n// ========== Language Curriculum Services ==========\n\nexport async function getLanguageCurriculum(langId: string): Promise<LanguageCurriculum | null> {\n    return Promise.resolve(languagesCurriculumData[langId] || null);\n}\n\nexport async function addLanguageCurriculum(langId: string, curriculum: LanguageCurriculum): Promise<void> {\n    languagesCurriculumData[langId] = curriculum;\n    return Promise.resolve();\n}\n\nexport async function deleteLanguageCurriculum(langId: string): Promise<void> {\n    delete languagesCurriculumData[langId];\n    return Promise.resolve();\n}\n\n// ========== Quick Question Services ==========\n\nexport async function getQuickQuestions(langId: string): Promise<string[] | undefined> {\n    return Promise.resolve(quickQuestionsData[langId]);\n}\n\nexport async function addQuickQuestions(langId: string, questions: string[]): Promise<void> {\n    quickQuestionsData[langId] = questions;\n    return Promise.resolve();\n}\n\n// ========== Topic Services (Example) ==========\n\nexport async function addTopic(langId: string, topic: Omit<Topic, 'id' | 'lessons'>): Promise<Topic | null> {\n    const curriculum = languagesCurriculumData[langId];\n    if (curriculum) {\n        const newTopic: Topic = {\n            ...topic,\n            id: `t-${Date.now()}`,\n            lessons: [],\n        };\n        curriculum.topics.push(newTopic);\n        \n        const summary = languagesSummaryData.find(s => s.id === langId);\n        if (summary) {\n            summary.topics = curriculum.topics.length;\n        }\n\n        return Promise.resolve(newTopic);\n    }\n    return Promise.resolve(null);\n}\n\n// ========== Lesson Services (Example) ==========\n\nexport async function addLesson(langId: string, topicId: string, lesson: Omit<Lesson, 'id'>): Promise<Lesson | null> {\n    const topic = languagesCurriculumData[langId]?.topics.find(t => t.id === topicId);\n    if (topic) {\n        const newLesson: Lesson = {\n            ...lesson,\n            id: `l-${Date.now()}`,\n        };\n        topic.lessons.push(newLesson);\n\n        const summary = languagesSummaryData.find(s => s.id === langId);\n        if (summary) {\n            summary.lessons = (summary.lessons || 0) + 1;\n        }\n\n        return Promise.resolve(newLesson);\n    }\n    return Promise.resolve(null);\n}\n"],"names":[],"mappings":";;;;;;IAwDsB,oBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/ai-assistant/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useState, useRef, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Bot, Send, User, Loader2, Sparkles } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { useLanguage } from '@/context/language-provider';\nimport { useProgrammingLanguage, type LanguageId } from '@/context/programming-language-provider';\nimport { chatbot } from '@/ai/flows/chatbot';\nimport { useToast } from '@/hooks/use-toast';\nimport { getQuickQuestions } from '@/services/languageService';\n\ntype Message = {\n    sender: 'user' | 'ai';\n    text: string;\n}\n\nconst languageNameMap: Record<string, string> = {\n    all: 'General Programming', js: 'JavaScript', py: 'Python', go: 'Go', rust: 'Rust',\n    java: 'Java', cpp: 'C++', pascal: 'Pascal', csharp: 'C#',\n    typescript: 'TypeScript', swift: 'Swift', kotlin: 'Kotlin', php: 'PHP',\n    ruby: 'Ruby', sql: 'SQL', dart: 'Dart', r: 'R', elixir: 'Elixir',\n    haskell: 'Haskell', lua: 'Lua', perl: 'Perl', scala: 'Scala', bash: 'Bash',\n};\n\nexport default function AiAssistantPage() {\n    const { t } = useLanguage();\n    const { selectedLanguage } = useProgrammingLanguage();\n    const { toast } = useToast();\n\n    const [messages, setMessages] = useState<Message[]>([]);\n    const [input, setInput] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const scrollAreaRef = useRef<HTMLDivElement>(null);\n    const [quickQuestions, setQuickQuestions] = useState<string[]>([]);\n\n    const sendMessage = async (messageText: string) => {\n        if (!messageText.trim() || isLoading) return;\n\n        const userMessage: Message = { sender: 'user', text: messageText };\n        setMessages(prev => [...prev, userMessage]);\n        setInput(''); // Clear input after sending\n        setIsLoading(true);\n\n        try {\n            const languageContext = languageNameMap[selectedLanguage] || 'General Programming';\n            const result = await chatbot({ query: messageText, language: languageContext });\n            const aiResponse: Message = { sender: 'ai', text: result.response };\n            setMessages(prev => [...prev, aiResponse]);\n        } catch (error) {\n            console.error(\"Error calling chatbot flow:\", error);\n            toast({\n                title: \"An Error Occurred\",\n                description: \"Failed to get a response from the AI assistant. Please try again.\",\n                variant: \"destructive\",\n            });\n            const errorMessage: Message = { sender: 'ai', text: \"I'm sorry, I encountered an error. Please try again.\" };\n            setMessages(prev => [...prev, errorMessage]);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleSendMessage = async (e: React.FormEvent) => {\n        e.preventDefault();\n        sendMessage(input);\n    }\n    \n    useEffect(() => {\n        const viewport = scrollAreaRef.current?.querySelector('div[data-radix-scroll-area-viewport]');\n        if (viewport) {\n            viewport.scrollTo({\n                top: viewport.scrollHeight,\n                behavior: 'smooth',\n            });\n        }\n    }, [messages, isLoading]);\n    \n    useEffect(() => {\n        const languageContext = languageNameMap[selectedLanguage] || 'General Programming';\n        const greeting = t('ai_greeting_context', { language: languageContext });\n        setMessages([{ sender: 'ai', text: greeting }]);\n\n        async function fetchQuickQuestions() {\n            if (selectedLanguage === 'all') {\n                setQuickQuestions([]);\n                return;\n            }\n            const questions = await getQuickQuestions(selectedLanguage);\n            setQuickQuestions(questions || []);\n        }\n\n        fetchQuickQuestions();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedLanguage, t]);\n\n    return (\n        <div className=\"h-[calc(100vh-120px)] flex flex-col\">\n            <div className=\"flex items-center gap-4 mb-8\">\n                <Bot size={40} className=\"text-primary shrink-0\" />\n                <div>\n                    <h1 className=\"font-headline text-3xl font-bold text-primary\">{t('ai_assistant_page_title')}</h1>\n                    <p className=\"text-lg text-muted-foreground\">{t('ask_coding_questions')} ({languageNameMap[selectedLanguage]})</p>\n                </div>\n            </div>\n\n            <Card className=\"flex-1 flex flex-col\">\n                <CardHeader>\n                    <CardTitle>{t('chat')}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"flex-1 overflow-hidden\">\n                    <ScrollArea className=\"h-full pr-4\" ref={scrollAreaRef}>\n                        <div className=\"space-y-6\">\n                            {messages.map((message, index) => (\n                                <div key={index} className={cn(\"flex items-start gap-4\", message.sender === 'user' ? 'justify-end' : 'justify-start')}>\n                                    {message.sender === 'ai' && (\n                                        <Avatar className=\"h-8 w-8 border shrink-0\">\n                                            <AvatarFallback className=\"bg-primary text-primary-foreground\"><Bot className=\"h-5 w-5\" /></AvatarFallback>\n                                        </Avatar>\n                                    )}\n                                    <div className={cn(\n                                        \"max-w-2xl p-3 rounded-lg\",\n                                        message.sender === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted'\n                                    )}>\n                                        <ReactMarkdown className=\"prose prose-sm dark:prose-invert max-w-none prose-p:my-0 prose-headings:my-2 prose-pre:my-2 prose-pre:bg-background/50 prose-pre:p-2 prose-pre:rounded-sm\">\n                                            {message.text}\n                                        </ReactMarkdown>\n                                    </div>\n                                    {message.sender === 'user' && (\n                                        <Avatar className=\"h-8 w-8 border shrink-0\">\n                                            <AvatarFallback><User className=\"h-5 w-5\" /></AvatarFallback>\n                                        </Avatar>\n                                    )}\n                                </div>\n                            ))}\n                            {isLoading && (\n                                <div className=\"flex items-start gap-4 justify-start\">\n                                    <Avatar className=\"h-8 w-8 border shrink-0\">\n                                        <AvatarFallback className=\"bg-primary text-primary-foreground\"><Bot className=\"h-5 w-5\" /></AvatarFallback>\n                                    </Avatar>\n                                    <div className=\"max-w-md p-3 rounded-lg bg-muted flex items-center\">\n                                        <Loader2 className=\"h-5 w-5 animate-spin text-muted-foreground\"/>\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    </ScrollArea>\n                </CardContent>\n                <CardFooter className=\"flex-col items-start gap-4\">\n                    {quickQuestions.length > 0 && (\n                         <div className=\"w-full\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                                <Sparkles className=\"h-4 w-4 text-primary\" />\n                                <h4 className=\"text-sm font-semibold\">{t('quick_questions')}</h4>\n                            </div>\n                            <div className=\"flex flex-wrap gap-2\">\n                                {quickQuestions.map((q, i) => (\n                                    <Button key={i} variant=\"outline\" size=\"sm\" onClick={() => sendMessage(q)} disabled={isLoading}>\n                                        {q}\n                                    </Button>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                    <form onSubmit={handleSendMessage} className=\"flex w-full items-center space-x-2\">\n                        <Input\n                            value={input}\n                            onChange={(e) => setInput(e.target.value)}\n                            placeholder={t('type_your_question')}\n                            disabled={isLoading}\n                        />\n                        <Button type=\"submit\" disabled={isLoading} className=\"w-[90px]\">\n                            {isLoading ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Send className=\"h-4 w-4\" />}\n                            <span className={cn(isLoading && \"sr-only\")}>{t('send')}</span>\n                        </Button>\n                    </form>\n                </CardFooter>\n            </Card>\n        </div>\n    )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}