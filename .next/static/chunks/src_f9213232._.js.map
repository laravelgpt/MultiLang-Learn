{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/decompose-problem.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI-powered tool to decompose complex problems into manageable steps.\n *\n * - decomposeProblem - A function that takes a problem statement and returns a structured breakdown.\n * - DecomposeProblemInput - The input type for the decomposeProblem function.\n * - DecomposeProblemOutput - The return type for the decomposeProblem function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst DecomposeProblemInputSchema = z.object({\n  problemStatement: z.string().describe('The problem statement to be decomposed.'),\n});\nexport type DecomposeProblemInput = z.infer<typeof DecomposeProblemInputSchema>;\n\nconst DecomposeProblemOutputSchema = z.object({\n  inputs: z.string().describe('What are the expected inputs for the problem?'),\n  outputs: z.string().describe('What is the expected output after solving the problem?'),\n  constraints: z.string().describe('What are the constraints or edge cases to consider?'),\n  stepByStepPlan: z.array(z.string()).describe('A step-by-step plan to solve the problem, as a list of strings.'),\n  dataStructures: z.string().describe('What data structures would be suitable for solving this problem and why?'),\n});\nexport type DecomposeProblemOutput = z.infer<typeof DecomposeProblemOutputSchema>;\n\nexport async function decomposeProblem(input: DecomposeProblemInput): Promise<DecomposeProblemOutput> {\n  return decomposeProblemFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'decomposeProblemPrompt',\n  input: {schema: DecomposeProblemInputSchema},\n  output: {schema: DecomposeProblemOutputSchema},\n  prompt: `You are an expert software engineer who excels at breaking down complex problems for beginners.\nA user has provided the following problem statement. Your task is to decompose it into a structured plan.\n\nProblem Statement:\n\"{{{problemStatement}}}\"\n\nPlease provide a clear and concise breakdown of this problem by filling out the following fields:\n- **inputs**: Describe the expected inputs.\n- **outputs**: Describe the desired output.\n- **constraints**: List any constraints, assumptions, or edge cases.\n- **stepByStepPlan**: Provide a step-by-step, high-level plan to solve the problem. Each step should be a clear action.\n- **dataStructures**: Suggest appropriate data structures and briefly explain why they are suitable.\n`,\n});\n\nconst decomposeProblemFlow = ai.defineFlow(\n  {\n    name: 'decomposeProblemFlow',\n    inputSchema: DecomposeProblemInputSchema,\n    outputSchema: DecomposeProblemOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IA0BsB,mBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/explain-code.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A Genkit flow for explaining code snippets.\n *\n * - explainCode - A function that takes a code snippet and returns an explanation.\n * - ExplainCodeInput - The input type for the explainCode function.\n * - ExplainCodeOutput - The return type for the explainCode function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ExplainCodeInputSchema = z.object({\n  code: z.string().describe('The code snippet to be explained.'),\n});\nexport type ExplainCodeInput = z.infer<typeof ExplainCodeInputSchema>;\n\nconst ExplainCodeOutputSchema = z.object({\n  explanation: z.string().describe('A detailed explanation of the code, formatted in Markdown.'),\n});\nexport type ExplainCodeOutput = z.infer<typeof ExplainCodeOutputSchema>;\n\nexport async function explainCode(input: ExplainCodeInput): Promise<ExplainCodeOutput> {\n  return explainCodeFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'explainCodePrompt',\n  input: {schema: ExplainCodeInputSchema},\n  output: {schema: ExplainCodeOutputSchema},\n  prompt: `You are an expert programming tutor and code debugger.\nYour primary task is to analyze the provided code snippet for errors.\n\n**If you find an error:**\n1.  **Identify the Bug:** Clearly state what the error is.\n2.  **Explain the Cause:** Explain in simple terms why the error occurs.\n3.  **Provide the Fix:** Show the corrected code snippet.\n4.  **Explain the Fix:** Briefly explain why the corrected code works.\n\n**If the code is correct and contains no errors:**\n1.  **High-Level Summary:** Start with a one-sentence summary of what the code does.\n2.  **Line-by-Line Explanation:** Break down the code into logical parts and explain each one.\n3.  **Key Concepts:** Briefly explain any important programming concepts demonstrated.\n4.  **Output:** Explain what the expected output of the code will be when it's run.\n\nFormat your entire response in simple Markdown. Use code blocks for code snippets.\n\nCode to analyze:\n\\`\\`\\`\n{{{code}}}\n\\`\\`\\`\n`,\n});\n\nconst explainCodeFlow = ai.defineFlow(\n  {\n    name: 'explainCodeFlow',\n    inputSchema: ExplainCodeInputSchema,\n    outputSchema: ExplainCodeOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAsBsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-code-example.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI-powered tool to generate code examples with common errors.\n *\n * - generateCodeExample - A function that takes a language, topic, and difficulty and returns a code example.\n * - GenerateCodeExampleInput - The input type for the generateCodeExample function.\n * - GenerateCodeExampleOutput - The return type for the generateCodeExample function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateCodeExampleInputSchema = z.object({\n  language: z.string().describe('The programming language for the code example (e.g., JavaScript, Python).'),\n  difficulty: z.string().describe(\"The difficulty level of the error in the code ('Easy', 'Medium', 'Hard', 'Heavy Hard').\"),\n  topic: z.string().describe(\"The specific programming topic or concept for the code example.\"),\n});\nexport type GenerateCodeExampleInput = z.infer<typeof GenerateCodeExampleInputSchema>;\n\nconst GenerateCodeExampleOutputSchema = z.object({\n  title: z.string().describe(\"A concise title for the code example.\"),\n  description: z.string().describe(\"A brief, one-sentence description of the concept or error demonstrated.\"),\n  code: z.string().describe(\"The code snippet containing a deliberate error appropriate for the specified language and difficulty.\"),\n});\nexport type GenerateCodeExampleOutput = z.infer<typeof GenerateCodeExampleOutputSchema>;\n\nexport async function generateCodeExample(input: GenerateCodeExampleInput): Promise<GenerateCodeExampleOutput> {\n  return generateCodeExampleFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateCodeExamplePrompt',\n  input: {schema: GenerateCodeExampleInputSchema},\n  output: {schema: GenerateCodeExampleOutputSchema},\n  prompt: `You are an expert programming instructor who creates educational code examples with deliberate errors.\nYour task is to generate a code snippet in '{{language}}' about the topic of '{{topic}}'.\nThe code **absolutely must contain one single, common, non-obvious error** corresponding to a '{{difficulty}}' difficulty level.\n\nIt is critical that the code has an error. The code should look correct at a glance but produce an incorrect result or a runtime error when executed.\nDo not add any comments explaining the error in the code itself. The purpose is for the user to find and fix it.\nThe error should be something a learner at the specified difficulty level could reasonably be expected to identify and fix.\n\nDifficulty Guide:\n- Easy: Simple syntax errors (e.g., missing parenthesis, typo in a variable name, incorrect operator).\n- Medium: Common logical errors (e.g., off-by-one, incorrect loop condition, misunderstanding 'this' context, scope issues).\n- Hard: More complex logical errors (e.g., uncontrolled recursion, mutation of state in functional contexts, incorrect asynchronous logic).\n- Heavy Hard: Subtle, advanced errors (e.g., race conditions, floating point imprecision, closure issues in loops, memory leaks).\n\nGenerate a code example for '{{language}}' on the topic '{{topic}}' with a '{{difficulty}}' level error.\nProvide a concise title and a one-sentence description for the example that are relevant to the topic.`,\n});\n\nconst generateCodeExampleFlow = ai.defineFlow(\n  {\n    name: 'generateCodeExampleFlow',\n    inputSchema: GenerateCodeExampleInputSchema,\n    outputSchema: GenerateCodeExampleOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IA0BsB,sBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-xl font-semibold leading-none tracking-tight md:text-2xl\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,mKAAA,CAAA,OAAkB;AAE/B,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,OAAkB;QACjB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8FACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG,mKAAA,CAAA,OAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,uYACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,mIACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 516, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 552, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 600, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/language-map.ts"],"sourcesContent":["export const languageNameMap: Record<string, string> = {\n  all: 'General Programming',\n  js: 'JavaScript',\n  py: 'Python',\n  go: 'Go',\n  rust: 'Rust',\n  java: 'Java',\n  cpp: 'C++',\n  pascal: 'Pascal',\n  csharp: 'C#',\n  typescript: 'TypeScript',\n  swift: 'Swift',\n  kotlin: 'Kotlin',\n  php: 'PHP',\n  ruby: 'Ruby',\n  sql: 'SQL',\n  dart: 'Dart',\n  r: 'R',\n  elixir: 'Elixir',\n  haskell: 'Haskell',\n  lua: 'Lua',\n  perl: 'Perl',\n  scala: 'Scala',\n  bash: 'Bash',\n};\n"],"names":[],"mappings":";;;AAAO,MAAM,kBAA0C;IACrD,KAAK;IACL,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,MAAM;IACN,MAAM;IACN,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,YAAY;IACZ,OAAO;IACP,QAAQ;IACR,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,GAAG;IACH,QAAQ;IACR,SAAS;IACT,KAAK;IACL,MAAM;IACN,OAAO;IACP,MAAM;AACR","debugId":null}},
    {"offset": {"line": 637, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/problem-solving/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport ReactMarkdown from 'react-markdown';\nimport { useLanguage } from '@/context/language-provider';\nimport { decomposeProblem, type DecomposeProblemOutput } from '@/ai/flows/decompose-problem';\nimport { explainCode } from '@/ai/flows/explain-code';\nimport { generateCodeExample } from '@/ai/flows/generate-code-example';\nimport { cn } from '@/lib/utils';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Form, FormControl, FormField, FormItem, FormMessage } from '@/components/ui/form';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Zap, BrainCircuit, Lightbulb, ListChecks, Goal, CheckCircle, Boxes, Loader2, FileCode, Code, Play, XCircle } from 'lucide-react';\nimport { Separator } from '@/components/ui/separator';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { Input } from '@/components/ui/input';\nimport { useProgrammingLanguage, type LanguageId } from '@/context/programming-language-provider';\nimport { Badge } from '@/components/ui/badge';\nimport { languageNameMap } from '@/lib/language-map';\n\n\nconst decomposerFormSchema = z.object({\n  problemStatement: z.string().min(10, { message: \"Problem statement must be at least 10 characters.\" }),\n});\n\nconst ProblemDecomposer = () => {\n  const { t } = useLanguage();\n  const [isLoading, setIsLoading] = useState(false);\n  const [analysis, setAnalysis] = useState<DecomposeProblemOutput | null>(null);\n\n  const form = useForm<z.infer<typeof decomposerFormSchema>>({\n    resolver: zodResolver(decomposerFormSchema),\n    defaultValues: {\n      problemStatement: \"\",\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof decomposerFormSchema>) {\n    setIsLoading(true);\n    setAnalysis(null);\n    try {\n      const result = await decomposeProblem({ problemStatement: values.problemStatement });\n      setAnalysis(result);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n  \n  const AnalysisSection = ({ icon, title, content }: { icon: React.ReactNode, title: string, content: string | string[] }) => (\n    <div>\n        <div className=\"flex items-center gap-3 mb-2\">\n            {icon}\n            <h3 className=\"text-lg font-semibold\">{title}</h3>\n        </div>\n        {Array.isArray(content) ? (\n            <ul className=\"space-y-2 pl-6\">\n                {content.map((item, index) => (\n                    <li key={index} className=\"flex items-start gap-2\">\n                        <CheckCircle className=\"h-4 w-4 mt-1 text-green-500 shrink-0\" />\n                        <p className=\"text-muted-foreground\">{item}</p>\n                    </li>\n                ))}\n            </ul>\n        ) : (\n            <p className=\"text-muted-foreground pl-9\">{content}</p>\n        )}\n    </div>\n  );\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-start mt-6\">\n        <Card>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)}>\n              <CardHeader>\n                <CardTitle>{t('problem_statement')}</CardTitle>\n                <CardDescription>{t('describe_the_problem')}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <FormField\n                  control={form.control}\n                  name=\"problemStatement\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <Textarea\n                          rows={8}\n                          placeholder={t('enter_problem_statement')}\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n              <CardContent>\n                <Button type=\"submit\" disabled={isLoading} className=\"w-full\">\n                  {isLoading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <BrainCircuit className=\"mr-2 h-4 w-4\" />}\n                  {isLoading ? t('decomposing') : t('decompose_problem')}\n                </Button>\n              </CardContent>\n            </form>\n          </Form>\n        </Card>\n\n        <Card className=\"min-h-[400px]\">\n          <CardHeader>\n            <CardTitle>{t('ai_breakdown')}</CardTitle>\n            <CardDescription>{t('ai_generated_plan')}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading && (\n              <div className=\"flex flex-col items-center justify-center h-64 text-muted-foreground\">\n                <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n                <p className=\"mt-4\">{t('decomposing')}</p>\n              </div>\n            )}\n            {analysis && !isLoading && (\n                <div className=\"space-y-6\">\n                    <AnalysisSection icon={<Goal className=\"h-6 w-6 text-primary\"/>} title={t('inputs')} content={analysis.inputs} />\n                    <Separator />\n                    <AnalysisSection icon={<ListChecks className=\"h-6 w-6 text-green-500\"/>} title={t('outputs')} content={analysis.outputs} />\n                    <Separator />\n                    <AnalysisSection icon={<Lightbulb className=\"h-6 w-6 text-yellow-500\"/>} title={t('constraints')} content={analysis.constraints} />\n                    <Separator />\n                    <AnalysisSection icon={<Boxes className=\"h-6 w-6 text-purple-500\"/>} title={t('suggested_data_structures')} content={analysis.dataStructures} />\n                    <Separator />\n                    <AnalysisSection icon={<ListChecks className=\"h-6 w-6 text-blue-500\"/>} title={t('step_by_step_plan')} content={analysis.stepByStepPlan} />\n                </div>\n            )}\n            {!analysis && !isLoading && (\n              <div className=\"flex flex-col items-center justify-center h-64 text-center text-muted-foreground\">\n                <BrainCircuit className=\"h-16 w-16 mb-4\" />\n                <p>{t('get_started_by_entering_problem')}</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n  );\n}\n\n\nconst CodeDebugger = () => {\n    const { t } = useLanguage();\n    const { toast } = useToast();\n    const { selectedLanguage } = useProgrammingLanguage();\n    const [code, setCode] = useState('// Generate a custom error example to get started.');\n    const [output, setOutput] = useState(\"\");\n    const [error, setError] = useState<{ message: string, lineNumber: number | null } | null>(null);\n    const [explanation, setExplanation] = useState(\"\");\n    const [isRunning, setIsRunning] = useState(false);\n    const [isExplaining, setIsExplaining] = useState(false);\n    const [isGenerating, setIsGenerating] = useState(false);\n    const [activeTab, setActiveTab] = useState(\"editor\");\n    const workerRef = useRef<Worker | null>(null);\n    const [topic, setTopic] = useState(\"\");\n    const [difficulty, setDifficulty] = useState(\"Medium\");\n    const [generatedTitle, setGeneratedTitle] = useState(\"\");\n    const [generatedDescription, setGeneratedDescription] = useState(\"\");\n\n    const parseLineNumber = (stack: string): number | null => {\n        const match = /<anonymous>:(\\d+):/.exec(stack);\n        if (match && match[1]) {\n            return parseInt(match[1], 10);\n        }\n        return null;\n    }\n\n    useEffect(() => {\n        workerRef.current = new Worker('/code-runner.js');\n        workerRef.current.onmessage = (e) => {\n            const { output: workerOutput, error: workerError } = e.data;\n            if (workerError) {\n                const lineNumber = parseLineNumber(workerError.stack);\n                setOutput('Error: ' + workerError.message);\n                setError({ message: workerError.message, lineNumber });\n            } else {\n                setOutput(workerOutput || \"Code executed successfully with no output.\");\n                setError(null);\n            }\n            setIsRunning(false);\n        };\n        workerRef.current.onerror = (e) => {\n            setOutput('An error occurred in the code runner: ' + e.message);\n            setIsRunning(false);\n        };\n        return () => {\n            workerRef.current?.terminate();\n        };\n    }, []);\n\n    const handleRunCode = () => {\n        if (!workerRef.current) return;\n        setIsRunning(true);\n        setOutput(\"Running code...\");\n        setError(null);\n        setActiveTab(\"output\");\n        workerRef.current.postMessage({ code });\n    };\n\n    const handleGenerateExample = async () => {\n        if (selectedLanguage === 'all') {\n            toast({\n                title: t('select_language_for_example_title'),\n                description: t('select_language_for_example_desc'),\n                variant: \"destructive\",\n            });\n            return;\n        }\n\n        if (!topic) {\n            toast({ title: \"Topic is required\", description: \"Please enter a topic to generate an example.\", variant: \"destructive\" });\n            return;\n        }\n        setIsGenerating(true);\n        setCode(\"// Generating example...\");\n        setGeneratedTitle(\"\");\n        setGeneratedDescription(\"\");\n        setExplanation(\"\");\n        setOutput(\"\");\n        setError(null);\n\n        try {\n            const result = await generateCodeExample({\n                language: languageNameMap[selectedLanguage] || selectedLanguage,\n                topic,\n                difficulty\n            });\n            setCode(result.code);\n            setGeneratedTitle(result.title);\n            setGeneratedDescription(result.description);\n            setActiveTab(\"editor\");\n        } catch (error) {\n            console.error(\"Failed to generate code example:\", error);\n            toast({ title: \"Generation Failed\", description: \"Could not generate an example. Please try again.\", variant: \"destructive\" });\n            setCode(\"// Failed to generate example. Please try again.\");\n        } finally {\n            setIsGenerating(false);\n        }\n    };\n\n\n    const handleDebugCode = async () => {\n        if (!code.trim() || code.startsWith('//')) {\n            toast({ title: t('cannot_explain_empty_title'), description: t('cannot_explain_empty_desc'), variant: 'destructive' });\n            return;\n        }\n        setIsExplaining(true);\n        setExplanation(\"\");\n        setActiveTab(\"explanation\");\n        try {\n            const result = await explainCode({ code });\n            setExplanation(result.explanation);\n        } catch (error) {\n            console.error(error);\n            setExplanation(\"Sorry, I had trouble explaining that code. Please check the console for details.\");\n            toast({ title: t('ai_explanation_failed_title'), description: t('ai_explanation_failed_desc'), variant: 'destructive' });\n        } finally {\n            setIsExplaining(false);\n        }\n    };\n\n    return (\n         <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 items-start mt-6\">\n            <div className=\"lg:col-span-1 space-y-4\">\n                 <Card>\n                    <CardHeader>\n                        <CardTitle>Generate Error Example</CardTitle>\n                        <CardDescription>Create a custom code challenge with a hidden error.</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"topic\">Topic</Label>\n                            <Input id=\"topic\" value={topic} onChange={(e) => setTopic(e.target.value)} placeholder=\"e.g., JavaScript closures\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"difficulty\">Difficulty</Label>\n                            <Select value={difficulty} onValueChange={(value) => setDifficulty(value)}>\n                                <SelectTrigger>\n                                    <SelectValue placeholder=\"Select difficulty\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                    <SelectItem value=\"Easy\">Easy</SelectItem>\n                                    <SelectItem value=\"Medium\">Medium</SelectItem>\n                                    <SelectItem value=\"Hard\">Hard</SelectItem>\n                                    <SelectItem value=\"Heavy Hard\">Heavy Hard</SelectItem>\n                                </SelectContent>\n                            </Select>\n                        </div>\n                    </CardContent>\n                    <CardFooter>\n                        <Button onClick={handleGenerateExample} disabled={isGenerating} className=\"w-full\">\n                            {isGenerating ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <BrainCircuit className=\"mr-2 h-4 w-4\" />}\n                            {isGenerating ? \"Generating...\" : \"Generate Example\"}\n                        </Button>\n                    </CardFooter>\n                </Card>\n                {generatedTitle && (\n                     <Card>\n                        <CardHeader>\n                            <CardTitle>{generatedTitle}</CardTitle>\n                            <CardDescription>{generatedDescription}</CardDescription>\n                        </CardHeader>\n                    </Card>\n                )}\n            </div>\n\n            <div className=\"lg:col-span-2\">\n                <Card>\n                    <CardHeader>\n                        <div className=\"flex flex-wrap items-center justify-between gap-4\">\n                            <div className=\"flex items-center gap-4\">\n                               <CardTitle className=\"text-xl flex items-center gap-2\"><Code className=\"h-5 w-5\" /> {t('debugging_sandbox')}</CardTitle>\n                               <Badge variant=\"outline\">{languageNameMap[selectedLanguage] || 'Select language'}</Badge>\n                            </div>\n                             <div className=\"flex items-center gap-2\">\n                                <Button onClick={handleRunCode} disabled={isRunning} className=\"bg-green-600 hover:bg-green-700 text-white w-[90px]\">\n                                    {isRunning ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Play className=\"mr-2 h-4 w-4\" />}\n                                    {isRunning ? t('running') : t('run')}\n                                </Button>\n                                <Button onClick={handleDebugCode} disabled={isExplaining} className=\"bg-purple-600 hover:bg-purple-700 text-white w-[180px]\">\n                                    {isExplaining ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <BrainCircuit className=\"mr-2 h-4 w-4\" />}\n                                    {isExplaining ? t('ai_suggesting') : t('debug_with_ai')}\n                                </Button>\n                            </div>\n                        </div>\n                    </CardHeader>\n                    <CardContent>\n                        <Tabs value={activeTab} onValueChange={setActiveTab}>\n                            <TabsList className=\"grid w-full grid-cols-3\">\n                                <TabsTrigger value=\"editor\">{t('editor')}</TabsTrigger>\n                                <TabsTrigger value=\"output\">{t('output')}</TabsTrigger>\n                                <TabsTrigger value=\"explanation\">{t('ai_explanation')}</TabsTrigger>\n                            </TabsList>\n                            <TabsContent value=\"editor\">\n                                <Textarea \n                                    value={code}\n                                    onChange={(e) => setCode(e.target.value)}\n                                    className=\"font-mono h-96 bg-muted/50 dark:bg-zinc-900 rounded-md border\" \n                                    placeholder=\"Write your code here...\"\n                                />\n                            </TabsContent>\n                            <TabsContent value=\"output\">\n                                <div className={cn(\n                                    \"font-mono h-96 rounded-md border p-4 overflow-auto transition-colors text-sm\",\n                                    !output && \"bg-muted\",\n                                    output && error && \"bg-red-50 dark:bg-destructive/10 border-destructive/30\",\n                                    output && !error && \"bg-green-50 dark:bg-green-950/30 border-green-500/30\"\n                                )}>\n                                    {isRunning ? (\n                                        <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                                            <Loader2 className=\"h-6 w-6 animate-spin\" />\n                                            <p className=\"ml-3\">{t('running')}</p>\n                                        </div>\n                                    ) : error ? (\n                                        <div className=\"flex items-start gap-4 text-destructive\">\n                                            <XCircle className=\"h-5 w-5 flex-shrink-0 mt-0.5\" />\n                                            <div>\n                                                <h3 className=\"font-bold mb-2\">Error on line {error.lineNumber || 'N/A'}</h3>\n                                                <pre className=\"font-mono text-sm whitespace-pre-wrap\">{error.message}</pre>\n                                            </div>\n                                        </div>\n                                    ) : output ? (\n                                        <div className=\"flex items-start gap-4 text-green-700 dark:text-green-300\">\n                                            <CheckCircle className=\"h-5 w-5 flex-shrink-0 mt-0.5\" />\n                                            <div>\n                                                <h3 className=\"font-bold mb-2\">Success!</h3>\n                                                <pre className=\"whitespace-pre-wrap\">{output}</pre>\n                                            </div>\n                                        </div>\n                                    ) : (\n                                        <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                                            <p>{t('run_to_see_output')}</p>\n                                        </div>\n                                    )}\n                                </div>\n                            </TabsContent>\n                             <TabsContent value=\"explanation\">\n                                <div className=\"font-sans h-96 bg-muted rounded-md border p-4 overflow-auto\">\n                                    {isExplaining && (\n                                        <div className=\"flex items-center justify-center h-full\">\n                                            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                                            <p className=\"ml-4 text-muted-foreground\">{t('ai_is_thinking')}</p>\n                                        </div>\n                                    )}\n                                    {explanation && !isExplaining && (\n                                        <ReactMarkdown className=\"prose prose-sm dark:prose-invert max-w-none\">\n                                            {explanation}\n                                        </ReactMarkdown>\n                                    )}\n                                    {!explanation && !isExplaining && (\n                                        <div className=\"flex flex-col items-center justify-center h-full text-center text-muted-foreground\">\n                                            <BrainCircuit className=\"h-12 w-12 mb-4\" />\n                                            <p>{t('debugger_placeholder')}</p>\n                                        </div>\n                                    )}\n                                </div>\n                            </TabsContent>\n                        </Tabs>\n                    </CardContent>\n                </Card>\n            </div>\n        </div>\n    );\n}\n\nexport default function ProblemSolvingPage() {\n  const { t } = useLanguage();\n  \n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center gap-4\">\n        <Zap className=\"h-10 w-10 text-primary shrink-0\" />\n        <div>\n          <h1 className=\"font-headline text-3xl font-bold text-primary\">{t('problem_solving_title')}</h1>\n          <p className=\"text-lg text-muted-foreground\">{t('problem_solving_desc')}</p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"decomposer\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"decomposer\">{t('problem_decomposer')}</TabsTrigger>\n          <TabsTrigger value=\"debugger\">{t('code_debugger')}</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"decomposer\">\n          <ProblemDecomposer />\n        </TabsContent>\n        <TabsContent value=\"debugger\">\n          <CodeDebugger />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}